!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CLIENTID	walker.py	/^CLIENTID = 0$/;"	v
COUPLING_WEIGHT	cpg.py	/^COUPLING_WEIGHT = 20$/;"	v
CpgController	cpg.py	/^class CpgController:$/;"	c
CpgController	objective_functions.py	/^from cpg import CpgController$/;"	i
DEFAULT_BIASES	walker.py	/^DEFAULT_BIASES = (.925, 1) # To correct for model imbalances$/;"	v
DIRECT_obj	incline.py	/^                def DIRECT_obj(x, user_data):$/;"	f	function:InclineOptimizer.optimize
DIRECT_obj	incline.py	/^        def DIRECT_obj(x, user_data):$/;"	f	function:InclineOptimizer.predict_optimal
DIRECT_obj	terrains.py	/^                def DIRECT_obj(x, user_data):$/;"	f	function:TerrainOptimizer.optimize
DIRECT_obj	terrains.py	/^        def DIRECT_obj(x, user_data):$/;"	f	function:TerrainOptimizer.predict_optimal
DIRECT_obj	turning.py	/^                def DIRECT_obj(x, user_data):$/;"	f	function:TurningOptimizer.optimize
DIRECT_obj	turning.py	/^        def DIRECT_obj(x, user_data):$/;"	f	function:TurningOptimizer.predict_optimal
Discovered1	cpg_gaits.py	/^Discovered1 = Gait($/;"	v
DotMap	discovery.py	/^from dotmap import DotMap$/;"	i
DotMap	moo.py	/^from dotmap import DotMap$/;"	i
DotMap	normal.py	/^from dotmap import DotMap$/;"	i
DualTripod	cpg_gaits.py	/^DualTripod = Gait($/;"	v
Dummy	cpg_gaits.py	/^Dummy = Gait($/;"	v
EI	discovery.py	/^from opto.opto.acq_func import EI$/;"	i
EI	moo.py	/^from opto.opto.acq_func import EI$/;"	i
EI	normal.py	/^from opto.opto.acq_func import EI$/;"	i
ENV_VAR	objective_functions.py	/^ENV_VAR = {}$/;"	v
FourTwo	cpg_gaits.py	/^FourTwo = Gait($/;"	v
GLOBALID	walker.py	/^GLOBALID = -1$/;"	v
GPy	incline.py	/^import GPy$/;"	i
GPy	terrains.py	/^import GPy$/;"	i
GPy	turning.py	/^import GPy$/;"	i
Gait	cpg_gaits.py	/^class Gait:$/;"	c
InclineOptimizer	incline.py	/^class InclineOptimizer:$/;"	c
LBFGS_obj	incline.py	/^                def LBFGS_obj(x):$/;"	f	function:InclineOptimizer.optimize
LBFGS_obj	incline.py	/^        def LBFGS_obj(x):$/;"	f	function:InclineOptimizer.predict_optimal
LBFGS_obj	terrains.py	/^                def LBFGS_obj(x):$/;"	f	function:TerrainOptimizer.optimize
LBFGS_obj	terrains.py	/^        def LBFGS_obj(x):$/;"	f	function:TerrainOptimizer.predict_optimal
LBFGS_obj	turning.py	/^                def LBFGS_obj(x):$/;"	f	function:TurningOptimizer.optimize
LBFGS_obj	turning.py	/^        def LBFGS_obj(x):$/;"	f	function:TurningOptimizer.predict_optimal
Leg	walker.py	/^class Leg:$/;"	c
MOTOR_NAME_TEMPLATES	walker.py	/^    'blh', 'brh', 'mrh', 'frh']$/;"	v
Motor	walker.py	/^class Motor:$/;"	c
OptTask	discovery.py	/^from opto.opto.classes.OptTask import OptTask$/;"	i
OptTask	moo.py	/^from opto.opto.classes.OptTask import OptTask$/;"	i
OptTask	normal.py	/^from opto.opto.classes.OptTask import OptTask$/;"	i
Oscillator	cpg.py	/^class Oscillator:$/;"	c
OscillatorNetwork	cpg.py	/^class OscillatorNetwork:$/;"	c
R_GAINS_CONSTANT	cpg.py	/^R_GAINS_CONSTANT = 20$/;"	v
R_f	cpg_gaits.py	/^    R_f=[.04 for _ in range(3)] + [0 for _ in range(3)],$/;"	v
R_f	cpg_gaits.py	/^    R_f=[.04 for _ in range(6)],$/;"	v
R_f	cpg_gaits.py	/^    R_f=[.04 for _ in range(6)],$/;"	v	class:Gait
R_f	cpg_gaits.py	/^    R_f=[0 for _ in range(3)] + [.04 for _ in range(3)],$/;"	v
R_l	cpg_gaits.py	/^    R_l=[.04 for _ in range(3)] + [0 for _ in range(3)],$/;"	v
R_l	cpg_gaits.py	/^    R_l=[.04 for _ in range(6)],$/;"	v
R_l	cpg_gaits.py	/^    R_l=[.04 for _ in range(6)],$/;"	v	class:Gait
R_l	cpg_gaits.py	/^    R_l=[0 for _ in range(3)] + [.04 for _ in range(3)],$/;"	v
Ripple	cpg_gaits.py	/^Ripple = Gait($/;"	v
SCENE_NAMES	objective_functions.py	/^SCENE_NAMES = ['normal.ttt',$/;"	v
SCENE_PATH	objective_functions.py	/^SCENE_PATH = 'scenes\/'$/;"	v
SIMX_HEADER_SIZE	vrep_api/vrepConst.py	/^SIMX_HEADER_SIZE                =18$/;"	v
SIMX_SUBHEADER_SIZE	vrep_api/vrepConst.py	/^SIMX_SUBHEADER_SIZE                 =26$/;"	v
SIMX_VERSION	vrep_api/vrepConst.py	/^SIMX_VERSION                    =0 $/;"	v
STEP_SIZE	cpg.py	/^STEP_SIZE = .05$/;"	v
StopCriteria	discovery.py	/^from opto.opto.classes import StopCriteria$/;"	i
StopCriteria	moo.py	/^from opto.opto.classes import StopCriteria$/;"	i
StopCriteria	normal.py	/^from opto.opto.classes import StopCriteria$/;"	i
TerrainOptimizer	terrains.py	/^class TerrainOptimizer:$/;"	c
TurnLeft	cpg_gaits.py	/^TurnLeft = Gait($/;"	v
TurnRight	cpg_gaits.py	/^TurnRight = Gait($/;"	v
TurningOptimizer	turning.py	/^class TurningOptimizer:$/;"	c
VALID_ERROR_CODES	objective_functions.py	/^VALID_ERROR_CODES = (0 , 1)$/;"	v
VALID_ERROR_CODES	walker.py	/^VALID_ERROR_CODES = (0 , 1)$/;"	v
Walker	objective_functions.py	/^from walker import Walker$/;"	i
Walker	walker.py	/^class Walker:$/;"	c
Wave	cpg_gaits.py	/^Wave = Gait($/;"	v
X_GAINS_CONSTANT	cpg.py	/^X_GAINS_CONSTANT = 20$/;"	v
X_f	cpg_gaits.py	/^    X_f=[.04 for _ in range(3)] + [0, 0, 0],$/;"	v
X_f	cpg_gaits.py	/^    X_f=[.04 for _ in range(6)],$/;"	v
X_f	cpg_gaits.py	/^    X_f=[.04 for _ in range(6)],$/;"	v	class:Gait
X_f	cpg_gaits.py	/^    X_f=[0, 0, 0] + [.04 for _ in range(3)],$/;"	v
X_l	cpg_gaits.py	/^    X_l=[.04 for _ in range(3)] + [0, .04, 0],$/;"	v
X_l	cpg_gaits.py	/^    X_l=[.04 for _ in range(6)],$/;"	v
X_l	cpg_gaits.py	/^    X_l=[.04 for _ in range(6)],$/;"	v	class:Gait
X_l	cpg_gaits.py	/^    X_l=[0, .04, 0] + [.04 for _ in range(3)],$/;"	v
__init__	cpg.py	/^    def __init__(self, f, R, X):$/;"	m	class:Oscillator
__init__	cpg.py	/^    def __init__(self, gait, f=None):$/;"	m	class:CpgController
__init__	cpg.py	/^    def __init__(self, oscillators, coupling_weights, phase_biases):$/;"	m	class:OscillatorNetwork
__init__	cpg_gaits.py	/^    def __init__(self, phase_groupings, f, R_l, R_f, X_l, X_f, phase_offset):$/;"	m	class:Gait
__init__	incline.py	/^        context_space):$/;"	m	class:InclineOptimizer
__init__	terrains.py	/^        context_space):$/;"	m	class:TerrainOptimizer
__init__	turning.py	/^        context_space):$/;"	m	class:TurningOptimizer
__init__	walker.py	/^    def __init__(self, client=0, name='Walker'):$/;"	m	class:Walker
__init__	walker.py	/^    def __init__(self, handle):$/;"	m	class:Motor
__init__	walker.py	/^    def __init__(self, vertical_motor, horizontal_motor):$/;"	m	class:Leg
absolute_import	discovery.py	/^from __future__ import division, print_function, absolute_import$/;"	i
absolute_import	moo.py	/^from __future__ import division, print_function, absolute_import$/;"	i
absolute_import	normal.py	/^from __future__ import division, print_function, absolute_import$/;"	i
acq_f	incline.py	/^    def acq_f(self, x, alpha=-1, v=.01, delta=.1):$/;"	m	class:InclineOptimizer
acq_f	terrains.py	/^    def acq_f(self, x, alpha=-1, v=.01, delta=.1):$/;"	m	class:TerrainOptimizer
acq_f	turning.py	/^    def acq_f(self, x, epsilon=.2, use_mean=False):$/;"	m	class:TurningOptimizer
all_scenes	normal.py	/^        all_scenes=True)$/;"	v
bounds	discovery.py	/^from opto.utils import bounds$/;"	i
bounds	moo.py	/^from opto.utils import bounds$/;"	i
bounds	normal.py	/^from opto.utils import bounds$/;"	i
c_AddStatusbarMessage	vrep_api/vrep.py	/^c_AddStatusbarMessage       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32)(("simxAddStatusbarMessage", libsimx))$/;"	v
c_AppendStringSignal	vrep_api/vrep.py	/^c_AppendStringSignal        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_ubyte), ct.c_int32, ct.c_int32)(("simxAppendStringSignal", libsimx))$/;"	v
c_AuxiliaryConsoleClose	vrep_api/vrep.py	/^c_AuxiliaryConsoleClose     = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32)(("simxAuxiliaryConsoleClose", libsimx))$/;"	v
c_AuxiliaryConsoleOpen	vrep_api/vrep.py	/^c_AuxiliaryConsoleOpen      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.c_int32), ct.POINTER(ct.c_float), ct.POINTER(ct.c_float), ct.POINTER(ct.c_int32), ct.c_int32)(("simxAuxiliaryConsoleOpen", libsimx))$/;"	v
c_AuxiliaryConsolePrint	vrep_api/vrep.py	/^c_AuxiliaryConsolePrint     = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32)(("simxAuxiliaryConsolePrint", libsimx))$/;"	v
c_AuxiliaryConsoleShow	vrep_api/vrep.py	/^c_AuxiliaryConsoleShow      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_ubyte, ct.c_int32)(("simxAuxiliaryConsoleShow", libsimx))$/;"	v
c_BreakForceSensor	vrep_api/vrep.py	/^c_BreakForceSensor          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32)(("simxBreakForceSensor", libsimx))$/;"	v
c_CallScriptFunction	vrep_api/vrep.py	/^c_CallScriptFunction        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32,ct.POINTER(ct.c_char),ct.c_int32,ct.POINTER(ct.c_char),ct.c_int32,ct.POINTER(ct.c_int32),ct.c_int32,ct.POINTER(ct.c_float),ct.c_int32,ct.POINTER(ct.c_char),ct.c_int32,ct.POINTER(ct.c_ubyte),ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_int32)),ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_float)),ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_char)),ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_ubyte)),ct.c_int32)(("simxCallScriptFunction", libsimx))$/;"	v
c_ClearFloatSignal	vrep_api/vrep.py	/^c_ClearFloatSignal          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32)(("simxClearFloatSignal", libsimx))$/;"	v
c_ClearIntegerSignal	vrep_api/vrep.py	/^c_ClearIntegerSignal        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32)(("simxClearIntegerSignal", libsimx))$/;"	v
c_ClearStringSignal	vrep_api/vrep.py	/^c_ClearStringSignal         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32)(("simxClearStringSignal", libsimx))$/;"	v
c_CloseScene	vrep_api/vrep.py	/^c_CloseScene                = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32)(("simxCloseScene", libsimx))$/;"	v
c_CopyPasteObjects	vrep_api/vrep.py	/^c_CopyPasteObjects          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32, ct.POINTER(ct.POINTER(ct.c_int32)), ct.POINTER(ct.c_int32), ct.c_int32)(("simxCopyPasteObjects", libsimx))$/;"	v
c_CreateBuffer	vrep_api/vrep.py	/^c_CreateBuffer              = ct.CFUNCTYPE(ct.POINTER(ct.c_ubyte), ct.c_int32)(("simxCreateBuffer", libsimx))$/;"	v
c_CreateDummy	vrep_api/vrep.py	/^c_CreateDummy               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_float, ct.POINTER(ct.c_ubyte), ct.POINTER(ct.c_int32), ct.c_int32)(("simxCreateDummy", libsimx))$/;"	v
c_DisplayDialog	vrep_api/vrep.py	/^c_DisplayDialog             = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_char), ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_float), ct.POINTER(ct.c_float), ct.POINTER(ct.c_int32), ct.POINTER(ct.c_int32), ct.c_int32)(("simxDisplayDialog", libsimx))$/;"	v
c_EndDialog	vrep_api/vrep.py	/^c_EndDialog                 = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32)(("simxEndDialog", libsimx))$/;"	v
c_EraseFile	vrep_api/vrep.py	/^c_EraseFile                 = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32)(("simxEraseFile", libsimx))$/;"	v
c_Finish	vrep_api/vrep.py	/^c_Finish                    = ct.CFUNCTYPE(None, ct.c_int32)(("simxFinish", libsimx))$/;"	v
c_GetAndClearStringSignal	vrep_api/vrep.py	/^c_GetAndClearStringSignal   = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.POINTER(ct.c_ubyte)), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetAndClearStringSignal", libsimx))$/;"	v
c_GetArrayParameter	vrep_api/vrep.py	/^c_GetArrayParameter         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetArrayParameter", libsimx))$/;"	v
c_GetBooleanParameter	vrep_api/vrep.py	/^c_GetBooleanParameter       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_ubyte), ct.c_int32)(("simxGetBooleanParameter", libsimx))$/;"	v
c_GetCollectionHandle	vrep_api/vrep.py	/^c_GetCollectionHandle       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetCollectionHandle", libsimx))$/;"	v
c_GetCollisionHandle	vrep_api/vrep.py	/^c_GetCollisionHandle        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetCollisionHandle", libsimx))$/;"	v
c_GetConnectionId	vrep_api/vrep.py	/^c_GetConnectionId           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32)(("simxGetConnectionId", libsimx))$/;"	v
c_GetDialogInput	vrep_api/vrep.py	/^c_GetDialogInput            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.POINTER(ct.c_char)), ct.c_int32)(("simxGetDialogInput", libsimx))$/;"	v
c_GetDialogResult	vrep_api/vrep.py	/^c_GetDialogResult           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetDialogResult", libsimx))$/;"	v
c_GetDistanceHandle	vrep_api/vrep.py	/^c_GetDistanceHandle         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetDistanceHandle", libsimx))$/;"	v
c_GetFloatSignal	vrep_api/vrep.py	/^c_GetFloatSignal            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_float), ct.c_int32)(("simxGetFloatSignal", libsimx))$/;"	v
c_GetFloatingParameter	vrep_api/vrep.py	/^c_GetFloatingParameter      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetFloatingParameter", libsimx))$/;"	v
c_GetInMessageInfo	vrep_api/vrep.py	/^c_GetInMessageInfo          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32))(("simxGetInMessageInfo", libsimx))$/;"	v
c_GetIntegerParameter	vrep_api/vrep.py	/^c_GetIntegerParameter       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetIntegerParameter", libsimx))$/;"	v
c_GetIntegerSignal	vrep_api/vrep.py	/^c_GetIntegerSignal          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetIntegerSignal", libsimx))$/;"	v
c_GetJointForce	vrep_api/vrep.py	/^c_GetJointForce             = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetJointForce", libsimx))$/;"	v
c_GetJointMatrix	vrep_api/vrep.py	/^c_GetJointMatrix            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetJointMatrix", libsimx))$/;"	v
c_GetJointPosition	vrep_api/vrep.py	/^c_GetJointPosition          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetJointPosition", libsimx))$/;"	v
c_GetLastCmdTime	vrep_api/vrep.py	/^c_GetLastCmdTime            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32)(("simxGetLastCmdTime", libsimx))$/;"	v
c_GetLastErrors	vrep_api/vrep.py	/^c_GetLastErrors             = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_char)), ct.c_int32)(("simxGetLastErrors", libsimx))$/;"	v
c_GetModelProperty	vrep_api/vrep.py	/^c_GetModelProperty          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetModelProperty", libsimx))$/;"	v
c_GetObjectChild	vrep_api/vrep.py	/^c_GetObjectChild            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetObjectChild", libsimx))$/;"	v
c_GetObjectFloatParameter	vrep_api/vrep.py	/^c_GetObjectFloatParameter   = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetObjectFloatParameter", libsimx))$/;"	v
c_GetObjectGroupData	vrep_api/vrep.py	/^c_GetObjectGroupData        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_int32)), ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_int32)), ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_float)), ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_char)), ct.c_int32)(("simxGetObjectGroupData", libsimx))$/;"	v
c_GetObjectHandle	vrep_api/vrep.py	/^c_GetObjectHandle           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetObjectHandle", libsimx))$/;"	v
c_GetObjectIntParameter	vrep_api/vrep.py	/^c_GetObjectIntParameter     = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetObjectIntParameter", libsimx))$/;"	v
c_GetObjectOrientation	vrep_api/vrep.py	/^c_GetObjectOrientation      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetObjectOrientation", libsimx))$/;"	v
c_GetObjectParent	vrep_api/vrep.py	/^c_GetObjectParent           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetObjectParent", libsimx))$/;"	v
c_GetObjectPosition	vrep_api/vrep.py	/^c_GetObjectPosition         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxGetObjectPosition", libsimx))$/;"	v
c_GetObjectSelection	vrep_api/vrep.py	/^c_GetObjectSelection        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.POINTER(ct.c_int32)), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetObjectSelection", libsimx))$/;"	v
c_GetObjectVelocity	vrep_api/vrep.py	/^c_GetObjectVelocity         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.POINTER(ct.c_float), ct.c_int32)(("simxGetObjectVelocity", libsimx))$/;"	v
c_GetObjects	vrep_api/vrep.py	/^c_GetObjects                = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_int32)), ct.c_int32)(("simxGetObjects", libsimx))$/;"	v
c_GetOutMessageInfo	vrep_api/vrep.py	/^c_GetOutMessageInfo         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32))(("simxGetOutMessageInfo", libsimx))$/;"	v
c_GetPingTime	vrep_api/vrep.py	/^c_GetPingTime               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_int32))(("simxGetPingTime", libsimx))$/;"	v
c_GetStringParameter	vrep_api/vrep.py	/^c_GetStringParameter        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.POINTER(ct.c_char)), ct.c_int32)(("simxGetStringParameter", libsimx))$/;"	v
c_GetStringSignal	vrep_api/vrep.py	/^c_GetStringSignal           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.POINTER(ct.c_ubyte)), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetStringSignal", libsimx))$/;"	v
c_GetUIButtonProperty	vrep_api/vrep.py	/^c_GetUIButtonProperty       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetUIButtonProperty", libsimx))$/;"	v
c_GetUIEventButton	vrep_api/vrep.py	/^c_GetUIEventButton          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetUIEventButton", libsimx))$/;"	v
c_GetUIHandle	vrep_api/vrep.py	/^c_GetUIHandle               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetUIHandle", libsimx))$/;"	v
c_GetUISlider	vrep_api/vrep.py	/^c_GetUISlider               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32)(("simxGetUISlider", libsimx))$/;"	v
c_GetVisionSensorDepthBuffer	vrep_api/vrep.py	/^c_GetVisionSensorDepthBuffer= ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_float)), ct.c_int32)(("simxGetVisionSensorDepthBuffer", libsimx))$/;"	v
c_GetVisionSensorImage	vrep_api/vrep.py	/^c_GetVisionSensorImage      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_byte)), ct.c_ubyte, ct.c_int32)(("simxGetVisionSensorImage", libsimx))$/;"	v
c_LoadModel	vrep_api/vrep.py	/^c_LoadModel                 = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_ubyte, ct.POINTER(ct.c_int32), ct.c_int32)(("simxLoadModel", libsimx))$/;"	v
c_LoadScene	vrep_api/vrep.py	/^c_LoadScene                 =  ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_ubyte, ct.c_int32)(("simxLoadScene", libsimx))$/;"	v
c_LoadUI	vrep_api/vrep.py	/^c_LoadUI                    = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_ubyte, ct.POINTER(ct.c_int32), ct.POINTER(ct.POINTER(ct.c_int32)), ct.c_int32)(("simxLoadUI", libsimx))$/;"	v
c_PauseCommunication	vrep_api/vrep.py	/^c_PauseCommunication        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_ubyte)(("simxPauseCommunication", libsimx))$/;"	v
c_PauseSimulation	vrep_api/vrep.py	/^c_PauseSimulation           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32)(("simxPauseSimulation", libsimx))$/;"	v
c_Query	vrep_api/vrep.py	/^c_Query                     = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_ubyte), ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.POINTER(ct.c_ubyte)), ct.POINTER(ct.c_int32), ct.c_int32)(("simxQuery", libsimx))$/;"	v
c_ReadCollision	vrep_api/vrep.py	/^c_ReadCollision             = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_ubyte), ct.c_int32)(("simxReadCollision", libsimx))$/;"	v
c_ReadDistance	vrep_api/vrep.py	/^c_ReadDistance              = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxReadDistance", libsimx))$/;"	v
c_ReadForceSensor	vrep_api/vrep.py	/^c_ReadForceSensor           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_ubyte), ct.POINTER(ct.c_float), ct.POINTER(ct.c_float), ct.c_int32)(("simxReadForceSensor", libsimx))$/;"	v
c_ReadProximitySensor	vrep_api/vrep.py	/^c_ReadProximitySensor       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_ubyte), ct.POINTER(ct.c_float), ct.POINTER(ct.c_int32), ct.POINTER(ct.c_float), ct.c_int32)(("simxReadProximitySensor", libsimx))$/;"	v
c_ReadStringStream	vrep_api/vrep.py	/^c_ReadStringStream          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.POINTER(ct.c_ubyte)), ct.POINTER(ct.c_int32), ct.c_int32)(("simxReadStringStream", libsimx))$/;"	v
c_ReadVisionSensor	vrep_api/vrep.py	/^c_ReadVisionSensor          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_ubyte), ct.POINTER(ct.POINTER(ct.c_float)), ct.POINTER(ct.POINTER(ct.c_int32)), ct.c_int32)(("simxReadVisionSensor", libsimx))$/;"	v
c_ReleaseBuffer	vrep_api/vrep.py	/^c_ReleaseBuffer             = ct.CFUNCTYPE(None, ct.c_void_p)(("simxReleaseBuffer", libsimx))$/;"	v
c_RemoveModel	vrep_api/vrep.py	/^c_RemoveModel               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32)(("simxRemoveModel", libsimx))$/;"	v
c_RemoveObject	vrep_api/vrep.py	/^c_RemoveObject              = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32)(("simxRemoveObject", libsimx))$/;"	v
c_RemoveUI	vrep_api/vrep.py	/^c_RemoveUI                  = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32)(("simxRemoveUI", libsimx))$/;"	v
c_SetArrayParameter	vrep_api/vrep.py	/^c_SetArrayParameter         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxSetArrayParameter", libsimx))$/;"	v
c_SetBooleanParameter	vrep_api/vrep.py	/^c_SetBooleanParameter       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_ubyte, ct.c_int32)(("simxSetBooleanParameter", libsimx))$/;"	v
c_SetFloatSignal	vrep_api/vrep.py	/^c_SetFloatSignal            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_float, ct.c_int32)(("simxSetFloatSignal", libsimx))$/;"	v
c_SetFloatingParameter	vrep_api/vrep.py	/^c_SetFloatingParameter      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_float, ct.c_int32)(("simxSetFloatingParameter", libsimx))$/;"	v
c_SetIntegerParameter	vrep_api/vrep.py	/^c_SetIntegerParameter       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32)(("simxSetIntegerParameter", libsimx))$/;"	v
c_SetIntegerSignal	vrep_api/vrep.py	/^c_SetIntegerSignal          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.c_int32, ct.c_int32)(("simxSetIntegerSignal", libsimx))$/;"	v
c_SetJointForce	vrep_api/vrep.py	/^c_SetJointForce             = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_float, ct.c_int32)(("simxSetJointForce", libsimx))$/;"	v
c_SetJointPosition	vrep_api/vrep.py	/^c_SetJointPosition          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_float, ct.c_int32)(("simxSetJointPosition", libsimx))$/;"	v
c_SetJointTargetPosition	vrep_api/vrep.py	/^c_SetJointTargetPosition    = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_float, ct.c_int32)(("simxSetJointTargetPosition", libsimx))$/;"	v
c_SetJointTargetVelocity	vrep_api/vrep.py	/^c_SetJointTargetVelocity    = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_float, ct.c_int32)(("simxSetJointTargetVelocity", libsimx))$/;"	v
c_SetModelProperty	vrep_api/vrep.py	/^c_SetModelProperty          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32)(("simxSetModelProperty", libsimx))$/;"	v
c_SetObjectFloatParameter	vrep_api/vrep.py	/^c_SetObjectFloatParameter   = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_float, ct.c_int32)(("simxSetObjectFloatParameter", libsimx))$/;"	v
c_SetObjectIntParameter	vrep_api/vrep.py	/^c_SetObjectIntParameter     = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32)(("simxSetObjectIntParameter", libsimx))$/;"	v
c_SetObjectOrientation	vrep_api/vrep.py	/^c_SetObjectOrientation      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxSetObjectOrientation", libsimx))$/;"	v
c_SetObjectParent	vrep_api/vrep.py	/^c_SetObjectParent           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_ubyte, ct.c_int32)(("simxSetObjectParent", libsimx))$/;"	v
c_SetObjectPosition	vrep_api/vrep.py	/^c_SetObjectPosition         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxSetObjectPosition", libsimx))$/;"	v
c_SetObjectSelection	vrep_api/vrep.py	/^c_SetObjectSelection        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_int32), ct.c_int32, ct.c_int32)(("simxSetObjectSelection", libsimx))$/;"	v
c_SetSphericalJointMatrix	vrep_api/vrep.py	/^c_SetSphericalJointMatrix   = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_float), ct.c_int32)(("simxSetSphericalJointMatrix", libsimx))$/;"	v
c_SetStringSignal	vrep_api/vrep.py	/^c_SetStringSignal           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_ubyte), ct.c_int32, ct.c_int32)(("simxSetStringSignal", libsimx))$/;"	v
c_SetUIButtonLabel	vrep_api/vrep.py	/^c_SetUIButtonLabel          = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_char), ct.c_int32)(("simxSetUIButtonLabel", libsimx))$/;"	v
c_SetUIButtonProperty	vrep_api/vrep.py	/^c_SetUIButtonProperty       = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32)(("simxSetUIButtonProperty", libsimx))$/;"	v
c_SetUISlider	vrep_api/vrep.py	/^c_SetUISlider               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32, ct.c_int32)(("simxSetUISlider", libsimx))$/;"	v
c_SetVisionSensorImage	vrep_api/vrep.py	/^c_SetVisionSensorImage      = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32, ct.POINTER(ct.c_byte), ct.c_int32, ct.c_ubyte, ct.c_int32)(("simxSetVisionSensorImage", libsimx))$/;"	v
c_Start	vrep_api/vrep.py	/^c_Start                     = ct.CFUNCTYPE(ct.c_int32,ct.POINTER(ct.c_char), ct.c_int32, ct.c_ubyte, ct.c_ubyte, ct.c_int32, ct.c_int32)(("simxStart", libsimx))$/;"	v
c_StartSimulation	vrep_api/vrep.py	/^c_StartSimulation           = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32)(("simxStartSimulation", libsimx))$/;"	v
c_StopSimulation	vrep_api/vrep.py	/^c_StopSimulation            = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_int32)(("simxStopSimulation", libsimx))$/;"	v
c_Synchronous	vrep_api/vrep.py	/^c_Synchronous               = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.c_ubyte)(("simxSynchronous", libsimx))$/;"	v
c_SynchronousTrigger	vrep_api/vrep.py	/^c_SynchronousTrigger        = ct.CFUNCTYPE(ct.c_int32,ct.c_int32)(("simxSynchronousTrigger", libsimx))$/;"	v
c_TransferFile	vrep_api/vrep.py	/^c_TransferFile              = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_char), ct.c_int32, ct.c_int32)(("simxTransferFile", libsimx))$/;"	v
c_WriteStringStream	vrep_api/vrep.py	/^c_WriteStringStream         = ct.CFUNCTYPE(ct.c_int32,ct.c_int32, ct.POINTER(ct.c_char), ct.POINTER(ct.c_ubyte), ct.c_int32, ct.c_int32)(("simxWriteStringStream", libsimx))$/;"	v
calculate_energy	walker.py	/^    def calculate_energy(self):$/;"	m	class:Motor
calculate_energy	walker.py	/^    def calculate_energy(self):$/;"	m	class:Walker
co	incline.py	/^co = InclineOptimizer(incline_obj_f, 3, [1, 0, 0], [60, 2 * np.pi, 1], [5,10,15])$/;"	v
co	terrains.py	/^co = TerrainOptimizer(terrain_obj_f, 3, [1, 0, 0], [60, 2 * np.pi, 1], [1, 1.5, 2])$/;"	v
ct	vrep_api/vrep.py	/^import ctypes as ct$/;"	i
d_output	cpg.py	/^    def d_output(self):$/;"	m	class:Oscillator
distance	objective_functions.py	/^def distance(a, b):$/;"	f
division	cpg_gaits.py	/^from __future__ import division$/;"	i
division	discovery.py	/^from __future__ import division, print_function, absolute_import$/;"	i
division	incline.py	/^from __future__ import division$/;"	i
division	moo.py	/^from __future__ import division, print_function, absolute_import$/;"	i
division	normal.py	/^from __future__ import division, print_function, absolute_import$/;"	i
division	terrains.py	/^from __future__ import division$/;"	i
division	turning.py	/^from __future__ import division$/;"	i
encode	cpg.py	/^    def encode(self, vert_osc, horiz_osc):$/;"	m	class:CpgController
exit_vrep	objective_functions.py	/^def exit_vrep():$/;"	f
extendX	walker.py	/^    def extendX(self, dist, force_data=True):$/;"	m	class:Leg
extendZ	walker.py	/^    def extendZ(self, dist, force_data=True):$/;"	m	class:Leg
f	cpg_gaits.py	/^    f=15,$/;"	v
f	cpg_gaits.py	/^    f=20,$/;"	v
f	cpg_gaits.py	/^    f=25,$/;"	v
f	cpg_gaits.py	/^    f=30,$/;"	v
f	cpg_gaits.py	/^    f=30,$/;"	v	class:Gait
f	cpg_gaits.py	/^    f=33,$/;"	v
f	cpg_gaits.py	/^    f=35,$/;"	v
file_extension	vrep_api/vrep.py	/^        file_extension = '.dll'$/;"	v
file_extension	vrep_api/vrep.py	/^        file_extension = '.dylib'$/;"	v
file_extension	vrep_api/vrep.py	/^        file_extension = '.so'$/;"	v
file_extension	vrep_api/vrep.py	/^    file_extension = '.so'$/;"	v
generate_coupling	cpg_gaits.py	/^    def generate_coupling(self, phase_groupings):$/;"	m	class:Gait
generate_f	objective_functions.py	/^    penalize_offset=True, client_id=0, all_scenes=False):$/;"	f
getPos	walker.py	/^    def getPos(self):$/;"	m	class:Motor
helper	objective_functions.py	/^    def helper(x):$/;"	f	function:generate_f
incline_obj_f	objective_functions.py	/^def incline_obj_f(x):$/;"	f
init_vrep	objective_functions.py	/^def init_vrep():$/;"	f
libfullpath	vrep_api/vrep.py	/^    libfullpath = os.path.join(os.path.dirname(__file__), 'remoteApi' + file_extension)$/;"	v
libsimx	vrep_api/vrep.py	/^    libsimx = ct.CDLL(libfullpath)$/;"	v
libsimx	vrep_api/vrep.py	/^libsimx = None$/;"	v
load_scene	objective_functions.py	/^def load_scene(path):$/;"	f
logs	discovery.py	/^logs = opt.get_logs()$/;"	v
logs	moo.py	/^logs = opt.get_logs()$/;"	v
logs	normal.py	/^logs = opt.get_logs()$/;"	v
main	cpg.py	/^def main():$/;"	f
matplotlib	cpg.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	discovery.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	incline.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	moo.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	normal.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	objective_functions.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	terrains.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	turning.py	/^import matplotlib.pyplot as plt$/;"	i
max	cpg.py	/^    def max(self):$/;"	m	class:Oscillator
min	cpg.py	/^    def min(self):$/;"	m	class:Oscillator
minimize	incline.py	/^from scipy.optimize import minimize$/;"	i
minimize	terrains.py	/^from scipy.optimize import minimize$/;"	i
minimize	turning.py	/^from scipy.optimize import minimize$/;"	i
modulate	cpg.py	/^    def modulate(self, new_R=None, new_X=None):$/;"	m	class:CpgController
modulate	cpg.py	/^    def modulate(self, new_R=None, new_X=None):$/;"	m	class:OscillatorNetwork
np	cpg.py	/^import numpy as np$/;"	i
np	cpg_gaits.py	/^import numpy as np$/;"	i
np	discovery.py	/^import numpy as np$/;"	i
np	incline.py	/^import numpy as np$/;"	i
np	moo.py	/^import numpy as np$/;"	i
np	normal.py	/^import numpy as np$/;"	i
np	objective_functions.py	/^import numpy as np$/;"	i
np	terrains.py	/^import numpy as np$/;"	i
np	turning.py	/^import numpy as np$/;"	i
obj_f	discovery.py	/^obj_f = generate_f(parameter_mode='discovery', objective_mode='moo', steps=400)$/;"	v
obj_f	moo.py	/^obj_f = generate_f(parameter_mode='normal', objective_mode='moo', steps=2)$/;"	v
obj_f	normal.py	/^obj_f = generate_f(parameter_mode='normal', $/;"	v
objective	objective_functions.py	/^    def objective(x):$/;"	f	function:generate_f
objective_mode	normal.py	/^        objective_mode='single',$/;"	v
opt	discovery.py	/^opt = opto.PAREGO(parameters=p, task=task, stopCriteria=stopCriteria)$/;"	v
opt	moo.py	/^opt = opto.PAREGO(parameters=p, task=task, stopCriteria=stopCriteria)$/;"	v
opt	normal.py	/^opt = opto.BO(parameters=p, task=task, stopCriteria=stopCriteria)$/;"	v
optimize	incline.py	/^    def optimize(self, n_iterations):$/;"	m	class:InclineOptimizer
optimize	terrains.py	/^    def optimize(self, n_iterations):$/;"	m	class:TerrainOptimizer
optimize	turning.py	/^    def optimize(self, n_iterations):$/;"	m	class:TurningOptimizer
opto	discovery.py	/^import opto$/;"	i
opto	moo.py	/^import opto$/;"	i
opto	normal.py	/^import opto$/;"	i
os	vrep_api/vrep.py	/^import os$/;"	i
output	cpg.py	/^    def output(self):$/;"	m	class:CpgController
output	cpg.py	/^    def output(self):$/;"	m	class:Oscillator
p	discovery.py	/^p = DotMap()$/;"	v
p	moo.py	/^p = DotMap()$/;"	v
p	normal.py	/^p = DotMap()$/;"	v
phase_groupings	cpg_gaits.py	/^    phase_groupings = {$/;"	v
phase_groupings	cpg_gaits.py	/^    phase_groupings={$/;"	v
phase_groupings	cpg_gaits.py	/^    phase_groupings={$/;"	v	class:Gait
phase_offset	cpg_gaits.py	/^    phase_offset=1.902525$/;"	v
phase_offset	cpg_gaits.py	/^    phase_offset=2.5735733$/;"	v
phase_offset	cpg_gaits.py	/^    phase_offset=pi \/ 2$/;"	v
phase_offset	cpg_gaits.py	/^    phase_offset=pi \/ 2$/;"	v	class:Gait
pi	cpg.py	/^pi = np.pi$/;"	v
pi	cpg_gaits.py	/^pi = np.pi$/;"	v
platform	vrep_api/vrep.py	/^import platform$/;"	i
plot	cpg.py	/^    def plot(self):$/;"	m	class:CpgController
plot	incline.py	/^    def plot(self, visible_dims=None):$/;"	m	class:InclineOptimizer
plot	terrains.py	/^    def plot(self, visible_dims=None):$/;"	m	class:TerrainOptimizer
plot	turning.py	/^    def plot(self, visible_dims=None):$/;"	m	class:TurningOptimizer
plt	cpg.py	/^import matplotlib.pyplot as plt$/;"	i
plt	discovery.py	/^import matplotlib.pyplot as plt$/;"	i
plt	incline.py	/^import matplotlib.pyplot as plt$/;"	i
plt	moo.py	/^import matplotlib.pyplot as plt$/;"	i
plt	normal.py	/^import matplotlib.pyplot as plt$/;"	i
plt	objective_functions.py	/^import matplotlib.pyplot as plt$/;"	i
plt	terrains.py	/^import matplotlib.pyplot as plt$/;"	i
plt	turning.py	/^import matplotlib.pyplot as plt$/;"	i
predict_optimal	incline.py	/^    def predict_optimal(self, context):$/;"	m	class:InclineOptimizer
predict_optimal	terrains.py	/^    def predict_optimal(self, context):$/;"	m	class:TerrainOptimizer
predict_optimal	turning.py	/^    def predict_optimal(self, context):$/;"	m	class:TurningOptimizer
print_function	discovery.py	/^from __future__ import division, print_function, absolute_import$/;"	i
print_function	moo.py	/^from __future__ import division, print_function, absolute_import$/;"	i
print_function	normal.py	/^from __future__ import division, print_function, absolute_import$/;"	i
quatToDirection	objective_functions.py	/^def quatToDirection(quat):$/;"	f
range	discovery.py	/^from builtins import range$/;"	i
range	moo.py	/^from builtins import range$/;"	i
range	normal.py	/^from builtins import range$/;"	i
regression	discovery.py	/^from opto import regression$/;"	i
regression	moo.py	/^from opto import regression$/;"	i
regression	normal.py	/^from opto import regression$/;"	i
reset	walker.py	/^    def reset(self):$/;"	m	class:Leg
reset	walker.py	/^    def reset(self):$/;"	m	class:Motor
reset	walker.py	/^    def reset(self):$/;"	m	class:Walker
scipy	turning.py	/^import scipy$/;"	i
setPos	walker.py	/^    def setPos(self, pos, force_data=False):$/;"	m	class:Motor
set_left_bias	walker.py	/^    def set_left_bias(self, bias):$/;"	m	class:Walker
set_right_bias	walker.py	/^    def set_right_bias(self, bias):$/;"	m	class:Walker
sim_api_errormessage_ignore	vrep_api/vrepConst.py	/^sim_api_errormessage_ignore    =0    # does not memorize nor output errors $/;"	v
sim_api_errormessage_output	vrep_api/vrepConst.py	/^sim_api_errormessage_output    =2  # memorizes and outputs errors (default for Lua-API calls) $/;"	v
sim_api_errormessage_report	vrep_api/vrepConst.py	/^sim_api_errormessage_report    =1    # memorizes errors (default for C-API calls) $/;"	v
sim_appobj_RESERVED_type	vrep_api/vrepConst.py	/^sim_appobj_RESERVED_type        =119$/;"	v
sim_appobj_collection_type	vrep_api/vrepConst.py	/^sim_appobj_collection_type      =115$/;"	v
sim_appobj_collision_type	vrep_api/vrepConst.py	/^sim_appobj_collision_type       =110$/;"	v
sim_appobj_constraintsolver_type	vrep_api/vrepConst.py	/^sim_appobj_constraintsolver_type=114$/;"	v
sim_appobj_distance_type	vrep_api/vrepConst.py	/^sim_appobj_distance_type        =111$/;"	v
sim_appobj_ik_type	vrep_api/vrepConst.py	/^sim_appobj_ik_type              =113$/;"	v
sim_appobj_object_type	vrep_api/vrepConst.py	/^sim_appobj_object_type          =109$/;"	v
sim_appobj_pathplanning_type	vrep_api/vrepConst.py	/^sim_appobj_pathplanning_type    =118$/;"	v
sim_appobj_script_type	vrep_api/vrepConst.py	/^sim_appobj_script_type          =117$/;"	v
sim_appobj_simulation_type	vrep_api/vrepConst.py	/^sim_appobj_simulation_type      =112$/;"	v
sim_appobj_texture_type	vrep_api/vrepConst.py	/^sim_appobj_texture_type         =120$/;"	v
sim_appobj_ui_type	vrep_api/vrepConst.py	/^sim_appobj_ui_type              =116$/;"	v
sim_arrayparam_ambient_light	vrep_api/vrepConst.py	/^sim_arrayparam_ambient_light    =5$/;"	v
sim_arrayparam_background_color1	vrep_api/vrepConst.py	/^sim_arrayparam_background_color1=3$/;"	v
sim_arrayparam_background_color2	vrep_api/vrepConst.py	/^sim_arrayparam_background_color2=4$/;"	v
sim_arrayparam_fog	vrep_api/vrepConst.py	/^sim_arrayparam_fog              =1$/;"	v
sim_arrayparam_fog_color	vrep_api/vrepConst.py	/^sim_arrayparam_fog_color        =2$/;"	v
sim_arrayparam_gravity	vrep_api/vrepConst.py	/^sim_arrayparam_gravity          =0$/;"	v
sim_arrayparam_random_euler	vrep_api/vrepConst.py	/^sim_arrayparam_random_euler        =6$/;"	v
sim_banner_backfaceculling	vrep_api/vrepConst.py	/^sim_banner_backfaceculling            =0x00200 # If specified the banner will only be visible from one side $/;"	v
sim_banner_bitmapfont	vrep_api/vrepConst.py	/^sim_banner_bitmapfont                =0x00800 # If specified a fixed-size bitmap font is used. The text will also always fully face the camera and be right $/;"	v
sim_banner_clickselectsparent	vrep_api/vrepConst.py	/^sim_banner_clickselectsparent        =0x00020 # if the object is associated with a scene object then clicking the banner will select the scene object $/;"	v
sim_banner_clicktriggersevent	vrep_api/vrepConst.py	/^sim_banner_clicktriggersevent        =0x00040 # if the banner is clicked an event is triggered (sim_message_eventcallback_bannerclicked and sim_message_bannerclicked are generated) $/;"	v
sim_banner_facingcamera	vrep_api/vrepConst.py	/^sim_banner_facingcamera                =0x00080 # If specified the banner will always face the camera by rotating around the banner's vertical axis (y-axis) $/;"	v
sim_banner_followparentvisibility	vrep_api/vrepConst.py	/^sim_banner_followparentvisibility    =0x00010 # if the object is associated with a scene object then it follows that visibility otherwise it is always visible $/;"	v
sim_banner_fullyfacingcamera	vrep_api/vrepConst.py	/^sim_banner_fullyfacingcamera        =0x00100 # If specified the banner will always fully face the camera (the banner's orientation is same as the camera looking at it) $/;"	v
sim_banner_keepsamesize	vrep_api/vrepConst.py	/^sim_banner_keepsamesize                =0x00400 # If specified the banner will always appear in the same size. In that case size represents the character height in pixels $/;"	v
sim_banner_left	vrep_api/vrepConst.py	/^sim_banner_left                        =0x00001 # Banners display on the left of the specified point $/;"	v
sim_banner_nobackground	vrep_api/vrepConst.py	/^sim_banner_nobackground                =0x00004 # Banners have no background rectangle $/;"	v
sim_banner_overlay	vrep_api/vrepConst.py	/^sim_banner_overlay                    =0x00008 # When specified banners are always drawn on top of "regular objects" $/;"	v
sim_banner_right	vrep_api/vrepConst.py	/^sim_banner_right                    =0x00002 # Banners display on the right of the specified point $/;"	v
sim_boolparam_aux_clip_planes_enabled	vrep_api/vrepConst.py	/^sim_boolparam_aux_clip_planes_enabled            =23$/;"	v
sim_boolparam_browser_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_browser_toolbarbutton_enabled        =36$/;"	v
sim_boolparam_browser_visible	vrep_api/vrepConst.py	/^sim_boolparam_browser_visible                   =12$/;"	v
sim_boolparam_collision_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_collision_handling_enabled        =2$/;"	v
sim_boolparam_console_visible	vrep_api/vrepConst.py	/^sim_boolparam_console_visible                   =1$/;"	v
sim_boolparam_display_enabled	vrep_api/vrepConst.py	/^sim_boolparam_display_enabled                   =16$/;"	v
sim_boolparam_distance_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_distance_handling_enabled         =3$/;"	v
sim_boolparam_dynamics_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_dynamics_handling_enabled         =6$/;"	v
sim_boolparam_exit_request	vrep_api/vrepConst.py	/^sim_boolparam_exit_request                        =41$/;"	v
sim_boolparam_fog_enabled	vrep_api/vrepConst.py	/^sim_boolparam_fog_enabled                       =19$/;"	v
sim_boolparam_force_calcstruct_all	vrep_api/vrepConst.py	/^sim_boolparam_force_calcstruct_all                =40$/;"	v
sim_boolparam_force_calcstruct_all_visible	vrep_api/vrepConst.py	/^sim_boolparam_force_calcstruct_all_visible        =39$/;"	v
sim_boolparam_force_show_wireless_emission	vrep_api/vrepConst.py	/^sim_boolparam_force_show_wireless_emission        =27$/;"	v
sim_boolparam_force_show_wireless_reception	vrep_api/vrepConst.py	/^sim_boolparam_force_show_wireless_reception        =28$/;"	v
sim_boolparam_full_model_copy_from_api	vrep_api/vrepConst.py	/^sim_boolparam_full_model_copy_from_api            =24$/;"	v
sim_boolparam_fullscreen	vrep_api/vrepConst.py	/^sim_boolparam_fullscreen                        =33$/;"	v
sim_boolparam_gcs_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_gcs_handling_enabled              =5$/;"	v
sim_boolparam_headless	vrep_api/vrepConst.py	/^sim_boolparam_headless                            =34$/;"	v
sim_boolparam_hierarchy_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_hierarchy_toolbarbutton_enabled    =35$/;"	v
sim_boolparam_hierarchy_visible	vrep_api/vrepConst.py	/^sim_boolparam_hierarchy_visible                 =0$/;"	v
sim_boolparam_ik_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_ik_handling_enabled               =4$/;"	v
sim_boolparam_infotext_visible	vrep_api/vrepConst.py	/^sim_boolparam_infotext_visible                  =17$/;"	v
sim_boolparam_joint_motion_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_joint_motion_handling_enabled     =7$/;"	v
sim_boolparam_mill_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_mill_handling_enabled             =11$/;"	v
sim_boolparam_mirrors_enabled	vrep_api/vrepConst.py	/^sim_boolparam_mirrors_enabled                    =22$/;"	v
sim_boolparam_objectrotate_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_objectrotate_toolbarbutton_enabled=38$/;"	v
sim_boolparam_objectshift_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_objectshift_toolbarbutton_enabled    =37$/;"	v
sim_boolparam_path_motion_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_path_motion_handling_enabled      =8$/;"	v
sim_boolparam_pause_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_pause_toolbarbutton_enabled        =43$/;"	v
sim_boolparam_play_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_play_toolbarbutton_enabled        =42$/;"	v
sim_boolparam_proximity_sensor_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_proximity_sensor_handling_enabled =9$/;"	v
sim_boolparam_realtime_simulation	vrep_api/vrepConst.py	/^sim_boolparam_realtime_simulation                =25$/;"	v
sim_boolparam_rml2_available	vrep_api/vrepConst.py	/^sim_boolparam_rml2_available                    =20$/;"	v
sim_boolparam_rml4_available	vrep_api/vrepConst.py	/^sim_boolparam_rml4_available                    =21$/;"	v
sim_boolparam_scene_and_model_load_messages	vrep_api/vrepConst.py	/^sim_boolparam_scene_and_model_load_messages     =13$/;"	v
sim_boolparam_shape_textures_are_visible	vrep_api/vrepConst.py	/^sim_boolparam_shape_textures_are_visible        =15$/;"	v
sim_boolparam_statustext_open	vrep_api/vrepConst.py	/^sim_boolparam_statustext_open                   =18$/;"	v
sim_boolparam_stop_toolbarbutton_enabled	vrep_api/vrepConst.py	/^sim_boolparam_stop_toolbarbutton_enabled        =44$/;"	v
sim_boolparam_threaded_rendering_enabled	vrep_api/vrepConst.py	/^sim_boolparam_threaded_rendering_enabled        =32$/;"	v
sim_boolparam_video_recording_triggered	vrep_api/vrepConst.py	/^sim_boolparam_video_recording_triggered            =29$/;"	v
sim_boolparam_vision_sensor_handling_enabled	vrep_api/vrepConst.py	/^sim_boolparam_vision_sensor_handling_enabled    =10$/;"	v
sim_boolparam_waiting_for_trigger	vrep_api/vrepConst.py	/^sim_boolparam_waiting_for_trigger                =45$/;"	v
sim_buttonproperty_borderless	vrep_api/vrepConst.py	/^sim_buttonproperty_borderless            =0x0020$/;"	v
sim_buttonproperty_button	vrep_api/vrepConst.py	/^sim_buttonproperty_button                =0x0000$/;"	v
sim_buttonproperty_closeaction	vrep_api/vrepConst.py	/^sim_buttonproperty_closeaction            =0x1000$/;"	v
sim_buttonproperty_downupevent	vrep_api/vrepConst.py	/^sim_buttonproperty_downupevent            =0x4000$/;"	v
sim_buttonproperty_editbox	vrep_api/vrepConst.py	/^sim_buttonproperty_editbox                =0x0003$/;"	v
sim_buttonproperty_enabled	vrep_api/vrepConst.py	/^sim_buttonproperty_enabled                =0x0010$/;"	v
sim_buttonproperty_horizontallycentered	vrep_api/vrepConst.py	/^sim_buttonproperty_horizontallycentered    =0x0040$/;"	v
sim_buttonproperty_ignoremouse	vrep_api/vrepConst.py	/^sim_buttonproperty_ignoremouse            =0x0080$/;"	v
sim_buttonproperty_isdown	vrep_api/vrepConst.py	/^sim_buttonproperty_isdown                =0x0100$/;"	v
sim_buttonproperty_label	vrep_api/vrepConst.py	/^sim_buttonproperty_label                =0x0001$/;"	v
sim_buttonproperty_nobackgroundcolor	vrep_api/vrepConst.py	/^sim_buttonproperty_nobackgroundcolor    =0x0400$/;"	v
sim_buttonproperty_rollupaction	vrep_api/vrepConst.py	/^sim_buttonproperty_rollupaction            =0x0800$/;"	v
sim_buttonproperty_slider	vrep_api/vrepConst.py	/^sim_buttonproperty_slider                =0x0002$/;"	v
sim_buttonproperty_staydown	vrep_api/vrepConst.py	/^sim_buttonproperty_staydown                =0x0008$/;"	v
sim_buttonproperty_transparent	vrep_api/vrepConst.py	/^sim_buttonproperty_transparent            =0x0200$/;"	v
sim_buttonproperty_verticallycentered	vrep_api/vrepConst.py	/^sim_buttonproperty_verticallycentered    =0x2000$/;"	v
sim_camerafloatparam_ortho_size	vrep_api/vrepConst.py	/^sim_camerafloatparam_ortho_size= 9002$/;"	v
sim_camerafloatparam_perspective_angle	vrep_api/vrepConst.py	/^sim_camerafloatparam_perspective_angle= 9001$/;"	v
sim_camerafloatparam_pov_aperture	vrep_api/vrepConst.py	/^sim_camerafloatparam_pov_aperture= 9006$/;"	v
sim_camerafloatparam_pov_blur_distance	vrep_api/vrepConst.py	/^sim_camerafloatparam_pov_blur_distance= 9005$/;"	v
sim_cameraintparam_disabled_light_components	vrep_api/vrepConst.py	/^sim_cameraintparam_disabled_light_components= 9000$/;"	v
sim_cameraintparam_pov_blur_samples	vrep_api/vrepConst.py	/^sim_cameraintparam_pov_blur_samples= 9007$/;"	v
sim_cameraintparam_pov_focal_blur	vrep_api/vrepConst.py	/^sim_cameraintparam_pov_focal_blur= 9004$/;"	v
sim_cameraintparam_rendering_attributes	vrep_api/vrepConst.py	/^sim_cameraintparam_rendering_attributes= 9003$/;"	v
sim_distcalcmethod_dac	vrep_api/vrepConst.py	/^sim_distcalcmethod_dac              =1$/;"	v
sim_distcalcmethod_dac_if_nonzero	vrep_api/vrepConst.py	/^sim_distcalcmethod_dac_if_nonzero   =6$/;"	v
sim_distcalcmethod_dl	vrep_api/vrepConst.py	/^sim_distcalcmethod_dl               =0$/;"	v
sim_distcalcmethod_dl_and_dac	vrep_api/vrepConst.py	/^sim_distcalcmethod_dl_and_dac       =3$/;"	v
sim_distcalcmethod_dl_if_nonzero	vrep_api/vrepConst.py	/^sim_distcalcmethod_dl_if_nonzero    =5$/;"	v
sim_distcalcmethod_max_dl_dac	vrep_api/vrepConst.py	/^sim_distcalcmethod_max_dl_dac       =2$/;"	v
sim_distcalcmethod_sqrt_dl2_and_dac2	vrep_api/vrepConst.py	/^sim_distcalcmethod_sqrt_dl2_and_dac2=4$/;"	v
sim_dlgret_cancel	vrep_api/vrepConst.py	/^sim_dlgret_cancel       =2$/;"	v
sim_dlgret_no	vrep_api/vrepConst.py	/^sim_dlgret_no           =4$/;"	v
sim_dlgret_ok	vrep_api/vrepConst.py	/^sim_dlgret_ok           =1$/;"	v
sim_dlgret_still_open	vrep_api/vrepConst.py	/^sim_dlgret_still_open   =0$/;"	v
sim_dlgret_yes	vrep_api/vrepConst.py	/^sim_dlgret_yes          =3$/;"	v
sim_dlgstyle_dont_center	vrep_api/vrepConst.py	/^sim_dlgstyle_dont_center    =32# can be combined with one of above values. Only with this flag can the position of the related UI be set just after dialog creation  $/;"	v
sim_dlgstyle_input	vrep_api/vrepConst.py	/^sim_dlgstyle_input          =1$/;"	v
sim_dlgstyle_message	vrep_api/vrepConst.py	/^sim_dlgstyle_message        =0$/;"	v
sim_dlgstyle_ok	vrep_api/vrepConst.py	/^sim_dlgstyle_ok             =2$/;"	v
sim_dlgstyle_ok_cancel	vrep_api/vrepConst.py	/^sim_dlgstyle_ok_cancel      =3$/;"	v
sim_dlgstyle_yes_no	vrep_api/vrepConst.py	/^sim_dlgstyle_yes_no         =4$/;"	v
sim_drawing_12percenttransparency	vrep_api/vrepConst.py	/^sim_drawing_12percenttransparency    =0x08000 # the drawing object will be 12.5% transparent $/;"	v
sim_drawing_25percenttransparency	vrep_api/vrepConst.py	/^sim_drawing_25percenttransparency    =0x04000 # the drawing object will be 25% transparent $/;"	v
sim_drawing_50percenttransparency	vrep_api/vrepConst.py	/^sim_drawing_50percenttransparency    =0x02000 # the drawing object will be 50% transparent $/;"	v
sim_drawing_backfaceculling	vrep_api/vrepConst.py	/^sim_drawing_backfaceculling            =0x00100 # back faces are not displayed for all items $/;"	v
sim_drawing_cubepoints	vrep_api/vrepConst.py	/^sim_drawing_cubepoints        =6          # 6 values per point (3 for cube position 3 for cube normal vector) (cube size in meters) $/;"	v
sim_drawing_cyclic	vrep_api/vrepConst.py	/^sim_drawing_cyclic                    =0x01000 # if the max item count was reached then the first items are overwritten. $/;"	v
sim_drawing_discpoints	vrep_api/vrepConst.py	/^sim_drawing_discpoints        =5            # 6 values per point (3 for disc position 3 for disc normal vector) (disc size in meters) $/;"	v
sim_drawing_emissioncolor	vrep_api/vrepConst.py	/^sim_drawing_emissioncolor            =0x10000 # When used in combination with sim_drawing_itemcolors or sim_drawing_vertexcolors then the specified colors will be for the emissive component $/;"	v
sim_drawing_facingcamera	vrep_api/vrepConst.py	/^sim_drawing_facingcamera            =0x20000 # Only for trianglepoints quadpoints discpoints and cubepoints. If specified the normal verctor is calculated to face the camera (each item data requires 3 values less) $/;"	v
sim_drawing_followparentvisibility	vrep_api/vrepConst.py	/^sim_drawing_followparentvisibility    =0x00800 # if the object is associated with a scene object then it follows that visibility otherwise it is always visible $/;"	v
sim_drawing_itemcolors	vrep_api/vrepConst.py	/^sim_drawing_itemcolors                =0x00020 # +3 values per item (each item has its own ambient color (rgb values)).$/;"	v
sim_drawing_itemsizes	vrep_api/vrepConst.py	/^sim_drawing_itemsizes                =0x00080 # +1 value per item (each item has its own size). Not for sim_drawing_triangles $/;"	v
sim_drawing_itemtransparency	vrep_api/vrepConst.py	/^sim_drawing_itemtransparency        =0x80000  # +1 value per item (each item has its own transparency value (0-1)). Not compatible with sim_drawing_vertexcolors $/;"	v
sim_drawing_lines	vrep_api/vrepConst.py	/^sim_drawing_lines            =1            # 6 values per line (line size in pixels) $/;"	v
sim_drawing_overlay	vrep_api/vrepConst.py	/^sim_drawing_overlay                    =0x40000 # When specified objects are always drawn on top of "regular objects" $/;"	v
sim_drawing_painttag	vrep_api/vrepConst.py	/^sim_drawing_painttag                =0x00400 # all items are tagged as paint (for additinal processing at a later stage) $/;"	v
sim_drawing_points	vrep_api/vrepConst.py	/^sim_drawing_points          =0            # 3 values per point (point size in pixels) $/;"	v
sim_drawing_quadpoints	vrep_api/vrepConst.py	/^sim_drawing_quadpoints        =4            # 6 values per point (3 for quad position 3 for quad normal vector) (quad size in meters) $/;"	v
sim_drawing_spherepoints	vrep_api/vrepConst.py	/^sim_drawing_spherepoints    =7          # 3 values per point (sphere size in meters) $/;"	v
sim_drawing_trianglepoints	vrep_api/vrepConst.py	/^sim_drawing_trianglepoints    =3            # 6 values per point (3 for triangle position 3 for triangle normal vector) (triangle size in meters) $/;"	v
sim_drawing_triangles	vrep_api/vrepConst.py	/^sim_drawing_triangles        =2            # 9 values per triangle $/;"	v
sim_drawing_vertexcolors	vrep_api/vrepConst.py	/^sim_drawing_vertexcolors            =0x00040 # +3 values per vertex (each vertex has its own ambient color (rgb values). Only for sim_drawing_lines (+6) and for sim_drawing_triangles(+9)). Mutually exclusive with sim_drawing_itemcolors $/;"	v
sim_drawing_wireframe	vrep_api/vrepConst.py	/^sim_drawing_wireframe                =0x00200 # all items displayed in wireframe $/;"	v
sim_dummyintparam_link_type	vrep_api/vrepConst.py	/^sim_dummyintparam_link_type= 10000$/;"	v
sim_floatparam_rand	vrep_api/vrepConst.py	/^sim_floatparam_rand=0 # random value (0.0-1.0) $/;"	v
sim_floatparam_simulation_time_step	vrep_api/vrepConst.py	/^sim_floatparam_simulation_time_step =1$/;"	v
sim_floatparam_stereo_distance	vrep_api/vrepConst.py	/^sim_floatparam_stereo_distance        =2$/;"	v
sim_forcefloatparam_error_a	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_a= 5003$/;"	v
sim_forcefloatparam_error_angle	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_angle= 5007$/;"	v
sim_forcefloatparam_error_b	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_b= 5004$/;"	v
sim_forcefloatparam_error_g	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_g= 5005$/;"	v
sim_forcefloatparam_error_pos	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_pos= 5006$/;"	v
sim_forcefloatparam_error_x	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_x= 5000$/;"	v
sim_forcefloatparam_error_y	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_y= 5001$/;"	v
sim_forcefloatparam_error_z	vrep_api/vrepConst.py	/^sim_forcefloatparam_error_z= 5002$/;"	v
sim_gui_all	vrep_api/vrepConst.py	/^sim_gui_all                            =0xffff$/;"	v
sim_gui_browser	vrep_api/vrepConst.py	/^sim_gui_browser                        =0x0400$/;"	v
sim_gui_dialogs	vrep_api/vrepConst.py	/^sim_gui_dialogs                        =0x0200$/;"	v
sim_gui_hierarchy	vrep_api/vrepConst.py	/^sim_gui_hierarchy                    =0x0010$/;"	v
sim_gui_infobar	vrep_api/vrepConst.py	/^sim_gui_infobar                        =0x0020$/;"	v
sim_gui_menubar	vrep_api/vrepConst.py	/^sim_gui_menubar                        =0x0001$/;"	v
sim_gui_popups	vrep_api/vrepConst.py	/^sim_gui_popups                        =0x0002$/;"	v
sim_gui_scripteditor	vrep_api/vrepConst.py	/^sim_gui_scripteditor                =0x0080$/;"	v
sim_gui_scriptsimulationparameters	vrep_api/vrepConst.py	/^sim_gui_scriptsimulationparameters    =0x0100$/;"	v
sim_gui_statusbar	vrep_api/vrepConst.py	/^sim_gui_statusbar                    =0x0040$/;"	v
sim_gui_toolbar1	vrep_api/vrepConst.py	/^sim_gui_toolbar1                    =0x0004$/;"	v
sim_gui_toolbar2	vrep_api/vrepConst.py	/^sim_gui_toolbar2                    =0x0008$/;"	v
sim_handle_all	vrep_api/vrepConst.py	/^sim_handle_all                        =-2$/;"	v
sim_handle_all_except_explicit	vrep_api/vrepConst.py	/^sim_handle_all_except_explicit        =-3$/;"	v
sim_handle_all_except_self	vrep_api/vrepConst.py	/^sim_handle_all_except_self            =-10$/;"	v
sim_handle_chain	vrep_api/vrepConst.py	/^sim_handle_chain                    =-7$/;"	v
sim_handle_default	vrep_api/vrepConst.py	/^sim_handle_default                    =-9$/;"	v
sim_handle_main_script	vrep_api/vrepConst.py	/^sim_handle_main_script                =-5$/;"	v
sim_handle_parent	vrep_api/vrepConst.py	/^sim_handle_parent                    =-11$/;"	v
sim_handle_self	vrep_api/vrepConst.py	/^sim_handle_self                        =-4$/;"	v
sim_handle_single	vrep_api/vrepConst.py	/^sim_handle_single                    =-8$/;"	v
sim_handle_tree	vrep_api/vrepConst.py	/^sim_handle_tree                        =-6$/;"	v
sim_handleflag_assembly	vrep_api/vrepConst.py	/^sim_handleflag_assembly                =0x400000$/;"	v
sim_handleflag_model	vrep_api/vrepConst.py	/^sim_handleflag_model                =0x800000$/;"	v
sim_ik_alpha_beta_constraint	vrep_api/vrepConst.py	/^sim_ik_alpha_beta_constraint=8$/;"	v
sim_ik_avoidance_constraint	vrep_api/vrepConst.py	/^sim_ik_avoidance_constraint =64$/;"	v
sim_ik_damped_least_squares_method	vrep_api/vrepConst.py	/^sim_ik_damped_least_squares_method  =1$/;"	v
sim_ik_gamma_constraint	vrep_api/vrepConst.py	/^sim_ik_gamma_constraint     =16$/;"	v
sim_ik_jacobian_transpose_method	vrep_api/vrepConst.py	/^sim_ik_jacobian_transpose_method    =2$/;"	v
sim_ik_pseudo_inverse_method	vrep_api/vrepConst.py	/^sim_ik_pseudo_inverse_method        =0$/;"	v
sim_ik_x_constraint	vrep_api/vrepConst.py	/^sim_ik_x_constraint         =1$/;"	v
sim_ik_y_constraint	vrep_api/vrepConst.py	/^sim_ik_y_constraint         =2$/;"	v
sim_ik_z_constraint	vrep_api/vrepConst.py	/^sim_ik_z_constraint         =4$/;"	v
sim_ikresult_fail	vrep_api/vrepConst.py	/^sim_ikresult_fail           =2$/;"	v
sim_ikresult_not_performed	vrep_api/vrepConst.py	/^sim_ikresult_not_performed  =0$/;"	v
sim_ikresult_success	vrep_api/vrepConst.py	/^sim_ikresult_success        =1$/;"	v
sim_intparam_compilation_version	vrep_api/vrepConst.py	/^sim_intparam_compilation_version    =4  # 0=evaluation version 1=full version 2=player version. Can only be read $/;"	v
sim_intparam_core_count	vrep_api/vrepConst.py	/^sim_intparam_core_count             =24$/;"	v
sim_intparam_current_page	vrep_api/vrepConst.py	/^sim_intparam_current_page           =5$/;"	v
sim_intparam_custom_cmd_start_id	vrep_api/vrepConst.py	/^sim_intparam_custom_cmd_start_id    =3  # can only be read $/;"	v
sim_intparam_dynamic_engine	vrep_api/vrepConst.py	/^sim_intparam_dynamic_engine         =8  # 0=Bullet 1=ODE. 2=Vortex.$/;"	v
sim_intparam_dynamic_step_divider	vrep_api/vrepConst.py	/^sim_intparam_dynamic_step_divider   =7  # can only be read $/;"	v
sim_intparam_dynamic_warning_disabled_mask	vrep_api/vrepConst.py	/^sim_intparam_dynamic_warning_disabled_mask =32$/;"	v
sim_intparam_edit_mode_type	vrep_api/vrepConst.py	/^sim_intparam_edit_mode_type         =14 # can only be read $/;"	v
sim_intparam_error_report_mode	vrep_api/vrepConst.py	/^sim_intparam_error_report_mode      =0  # Check sim_api_errormessage_... constants above for valid values $/;"	v
sim_intparam_event_flags_read	vrep_api/vrepConst.py	/^sim_intparam_event_flags_read       =17 # can only be read $/;"	v
sim_intparam_event_flags_read_clear	vrep_api/vrepConst.py	/^sim_intparam_event_flags_read_clear =18 # can only be read $/;"	v
sim_intparam_flymode_camera_handle	vrep_api/vrepConst.py	/^sim_intparam_flymode_camera_handle  =6  # can only be read $/;"	v
sim_intparam_idle_fps	vrep_api/vrepConst.py	/^sim_intparam_idle_fps               =26$/;"	v
sim_intparam_infotext_style	vrep_api/vrepConst.py	/^sim_intparam_infotext_style         =12$/;"	v
sim_intparam_instance_count	vrep_api/vrepConst.py	/^sim_intparam_instance_count         =2  # do not use anymore (always returns 1 since V-REP 2.5.11) $/;"	v
sim_intparam_motionplanning_seed	vrep_api/vrepConst.py	/^sim_intparam_motionplanning_seed    =35$/;"	v
sim_intparam_mouse_buttons	vrep_api/vrepConst.py	/^sim_intparam_mouse_buttons          =31$/;"	v
sim_intparam_mouse_x	vrep_api/vrepConst.py	/^sim_intparam_mouse_x                =22$/;"	v
sim_intparam_mouse_y	vrep_api/vrepConst.py	/^sim_intparam_mouse_y                =23$/;"	v
sim_intparam_platform	vrep_api/vrepConst.py	/^sim_intparam_platform               =19 # can only be read $/;"	v
sim_intparam_program_revision	vrep_api/vrepConst.py	/^sim_intparam_program_revision       =30$/;"	v
sim_intparam_program_version	vrep_api/vrepConst.py	/^sim_intparam_program_version        =1  # e.g Version 2.1.4 --> 20104. Can only be read $/;"	v
sim_intparam_prox_sensor_select_down	vrep_api/vrepConst.py	/^sim_intparam_prox_sensor_select_down =27$/;"	v
sim_intparam_prox_sensor_select_up	vrep_api/vrepConst.py	/^sim_intparam_prox_sensor_select_up  =28$/;"	v
sim_intparam_qt_version	vrep_api/vrepConst.py	/^sim_intparam_qt_version             =16 # version of the used Qt framework $/;"	v
sim_intparam_scene_index	vrep_api/vrepConst.py	/^sim_intparam_scene_index            =34$/;"	v
sim_intparam_scene_unique_id	vrep_api/vrepConst.py	/^sim_intparam_scene_unique_id        =20 # can only be read $/;"	v
sim_intparam_server_port_next	vrep_api/vrepConst.py	/^sim_intparam_server_port_next       =15 # is initialized at sim_intparam_server_port_start $/;"	v
sim_intparam_server_port_range	vrep_api/vrepConst.py	/^sim_intparam_server_port_range      =10 # can only be read $/;"	v
sim_intparam_server_port_start	vrep_api/vrepConst.py	/^sim_intparam_server_port_start      =9  # can only be read $/;"	v
sim_intparam_settings	vrep_api/vrepConst.py	/^sim_intparam_settings               =13$/;"	v
sim_intparam_simulation_warning_disabled_mask	vrep_api/vrepConst.py	/^sim_intparam_simulation_warning_disabled_mask =33$/;"	v
sim_intparam_speedmodifier	vrep_api/vrepConst.py	/^sim_intparam_speedmodifier          =36$/;"	v
sim_intparam_stop_request_counter	vrep_api/vrepConst.py	/^sim_intparam_stop_request_counter   =29$/;"	v
sim_intparam_visible_layers	vrep_api/vrepConst.py	/^sim_intparam_visible_layers         =11$/;"	v
sim_intparam_work_thread_calc_time_ms	vrep_api/vrepConst.py	/^sim_intparam_work_thread_calc_time_ms =25$/;"	v
sim_intparam_work_thread_count	vrep_api/vrepConst.py	/^sim_intparam_work_thread_count      =21$/;"	v
sim_joint_prismatic_subtype	vrep_api/vrepConst.py	/^sim_joint_prismatic_subtype         =11$/;"	v
sim_joint_revolute_subtype	vrep_api/vrepConst.py	/^sim_joint_revolute_subtype          =10$/;"	v
sim_joint_spherical_subtype	vrep_api/vrepConst.py	/^sim_joint_spherical_subtype         =12$/;"	v
sim_jointfloatparam_error_a	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_a= 2025$/;"	v
sim_jointfloatparam_error_angle	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_angle= 2029$/;"	v
sim_jointfloatparam_error_b	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_b= 2026$/;"	v
sim_jointfloatparam_error_g	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_g= 2027$/;"	v
sim_jointfloatparam_error_pos	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_pos= 2028$/;"	v
sim_jointfloatparam_error_x	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_x= 2022$/;"	v
sim_jointfloatparam_error_y	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_y= 2023$/;"	v
sim_jointfloatparam_error_z	vrep_api/vrepConst.py	/^sim_jointfloatparam_error_z= 2024$/;"	v
sim_jointfloatparam_ik_weight	vrep_api/vrepConst.py	/^sim_jointfloatparam_ik_weight= 2021$/;"	v
sim_jointfloatparam_intrinsic_qw	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_qw= 2011$/;"	v
sim_jointfloatparam_intrinsic_qx	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_qx= 2008$/;"	v
sim_jointfloatparam_intrinsic_qy	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_qy= 2009$/;"	v
sim_jointfloatparam_intrinsic_qz	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_qz= 2010$/;"	v
sim_jointfloatparam_intrinsic_x	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_x= 2005$/;"	v
sim_jointfloatparam_intrinsic_y	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_y= 2006$/;"	v
sim_jointfloatparam_intrinsic_z	vrep_api/vrepConst.py	/^sim_jointfloatparam_intrinsic_z= 2007$/;"	v
sim_jointfloatparam_kc_c	vrep_api/vrepConst.py	/^sim_jointfloatparam_kc_c= 2019$/;"	v
sim_jointfloatparam_kc_k	vrep_api/vrepConst.py	/^sim_jointfloatparam_kc_k= 2018$/;"	v
sim_jointfloatparam_pid_d	vrep_api/vrepConst.py	/^sim_jointfloatparam_pid_d= 2004$/;"	v
sim_jointfloatparam_pid_i	vrep_api/vrepConst.py	/^sim_jointfloatparam_pid_i= 2003$/;"	v
sim_jointfloatparam_pid_p	vrep_api/vrepConst.py	/^sim_jointfloatparam_pid_p= 2002$/;"	v
sim_jointfloatparam_spherical_qw	vrep_api/vrepConst.py	/^sim_jointfloatparam_spherical_qw= 2016$/;"	v
sim_jointfloatparam_spherical_qx	vrep_api/vrepConst.py	/^sim_jointfloatparam_spherical_qx= 2013$/;"	v
sim_jointfloatparam_spherical_qy	vrep_api/vrepConst.py	/^sim_jointfloatparam_spherical_qy= 2014$/;"	v
sim_jointfloatparam_spherical_qz	vrep_api/vrepConst.py	/^sim_jointfloatparam_spherical_qz= 2015$/;"	v
sim_jointfloatparam_upper_limit	vrep_api/vrepConst.py	/^sim_jointfloatparam_upper_limit= 2017$/;"	v
sim_jointfloatparam_velocity	vrep_api/vrepConst.py	/^sim_jointfloatparam_velocity= 2012$/;"	v
sim_jointfloatparam_vortex_dep_multiplication	vrep_api/vrepConst.py	/^sim_jointfloatparam_vortex_dep_multiplication= 2032$/;"	v
sim_jointfloatparam_vortex_dep_offset	vrep_api/vrepConst.py	/^sim_jointfloatparam_vortex_dep_offset= 2033$/;"	v
sim_jointintparam_ctrl_enabled	vrep_api/vrepConst.py	/^sim_jointintparam_ctrl_enabled= 2001$/;"	v
sim_jointintparam_motor_enabled	vrep_api/vrepConst.py	/^sim_jointintparam_motor_enabled= 2000$/;"	v
sim_jointintparam_velocity_lock	vrep_api/vrepConst.py	/^sim_jointintparam_velocity_lock= 2030$/;"	v
sim_jointintparam_vortex_dep_handle	vrep_api/vrepConst.py	/^sim_jointintparam_vortex_dep_handle= 2031$/;"	v
sim_jointmode_dependent	vrep_api/vrepConst.py	/^sim_jointmode_dependent     =4$/;"	v
sim_jointmode_force	vrep_api/vrepConst.py	/^sim_jointmode_force         =5$/;"	v
sim_jointmode_ik	vrep_api/vrepConst.py	/^sim_jointmode_ik            =2$/;"	v
sim_jointmode_ikdependent	vrep_api/vrepConst.py	/^sim_jointmode_ikdependent   =3$/;"	v
sim_jointmode_motion	vrep_api/vrepConst.py	/^sim_jointmode_motion        =1$/;"	v
sim_jointmode_passive	vrep_api/vrepConst.py	/^sim_jointmode_passive       =0$/;"	v
sim_light_directional_subtype	vrep_api/vrepConst.py	/^sim_light_directional_subtype       =3$/;"	v
sim_light_omnidirectional_subtype	vrep_api/vrepConst.py	/^sim_light_omnidirectional_subtype   =1$/;"	v
sim_light_spot_subtype	vrep_api/vrepConst.py	/^sim_light_spot_subtype              =2$/;"	v
sim_lightintparam_pov_casts_shadows	vrep_api/vrepConst.py	/^sim_lightintparam_pov_casts_shadows= 8000$/;"	v
sim_lua_arg_bool	vrep_api/vrepConst.py	/^sim_lua_arg_bool    =1    $/;"	v
sim_lua_arg_float	vrep_api/vrepConst.py	/^sim_lua_arg_float   =3$/;"	v
sim_lua_arg_int	vrep_api/vrepConst.py	/^sim_lua_arg_int     =2$/;"	v
sim_lua_arg_invalid	vrep_api/vrepConst.py	/^sim_lua_arg_invalid =5$/;"	v
sim_lua_arg_nil	vrep_api/vrepConst.py	/^sim_lua_arg_nil     =0$/;"	v
sim_lua_arg_string	vrep_api/vrepConst.py	/^sim_lua_arg_string  =4$/;"	v
sim_lua_arg_table	vrep_api/vrepConst.py	/^sim_lua_arg_table   =8$/;"	v
sim_message_bannerclicked	vrep_api/vrepConst.py	/^sim_message_bannerclicked            =7    # a banner was clicked (aux[0]=banner ID) $/;"	v
sim_message_eventcallback_abouttoredo	vrep_api/vrepConst.py	/^sim_message_eventcallback_abouttoredo                 =0x11a   # the redo button was hit and a future state is about to be restored  $/;"	v
sim_message_eventcallback_abouttoundo	vrep_api/vrepConst.py	/^sim_message_eventcallback_abouttoundo                 =0x118   # the undo button was hit and a previous state is about to be restored $/;"	v
sim_message_eventcallback_bannerclicked	vrep_api/vrepConst.py	/^sim_message_eventcallback_bannerclicked              =0x123   # called when a banner was clicked (aux[0]=banner ID) $/;"	v
sim_message_eventcallback_broadcast	vrep_api/vrepConst.py	/^sim_message_eventcallback_broadcast     =0x10e$/;"	v
sim_message_eventcallback_guipass	vrep_api/vrepConst.py	/^sim_message_eventcallback_guipass                    =0x129$/;"	v
sim_message_eventcallback_imagefilter_adjustparams	vrep_api/vrepConst.py	/^sim_message_eventcallback_imagefilter_adjustparams   =0x111$/;"	v
sim_message_eventcallback_imagefilter_enumerate	vrep_api/vrepConst.py	/^sim_message_eventcallback_imagefilter_enumerate      =0x110$/;"	v
sim_message_eventcallback_imagefilter_enumreset	vrep_api/vrepConst.py	/^sim_message_eventcallback_imagefilter_enumreset =0x10f$/;"	v
sim_message_eventcallback_imagefilter_process	vrep_api/vrepConst.py	/^sim_message_eventcallback_imagefilter_process        =0x113$/;"	v
sim_message_eventcallback_imagefilter_reserved	vrep_api/vrepConst.py	/^sim_message_eventcallback_imagefilter_reserved       =0x112$/;"	v
sim_message_eventcallback_instancepass	vrep_api/vrepConst.py	/^sim_message_eventcallback_instancepass    =0x10d        # Called once every main application loop pass. auxiliaryData[0] contains event flags of events that happened since last time $/;"	v
sim_message_eventcallback_instanceswitch	vrep_api/vrepConst.py	/^sim_message_eventcallback_instanceswitch             =0x128$/;"	v
sim_message_eventcallback_keypress	vrep_api/vrepConst.py	/^sim_message_eventcallback_keypress                     =0x120   # a key was pressed while the focus was on a page (aux[0]=key aux[1]=ctrl and shift key state) $/;"	v
sim_message_eventcallback_mainscriptabouttobecalled	vrep_api/vrepConst.py	/^sim_message_eventcallback_mainscriptabouttobecalled  =0x12a$/;"	v
sim_message_eventcallback_menuitemselected	vrep_api/vrepConst.py	/^sim_message_eventcallback_menuitemselected           =0x124   # auxiliaryData[0] indicates the handle of the item auxiliaryData[1] indicates the state of the item $/;"	v
sim_message_eventcallback_modelloaded	vrep_api/vrepConst.py	/^sim_message_eventcallback_modelloaded                =0x127$/;"	v
sim_message_eventcallback_modelsave	vrep_api/vrepConst.py	/^sim_message_eventcallback_modelsave        =0x105      # about to save a model (current selection will be saved) $/;"	v
sim_message_eventcallback_moduleclose	vrep_api/vrepConst.py	/^sim_message_eventcallback_moduleclose    =0x108        # called when simCloseModule in Lua is called $/;"	v
sim_message_eventcallback_modulehandle	vrep_api/vrepConst.py	/^sim_message_eventcallback_modulehandle    =0x107        # called when simHandleModule in Lua is called with argument false $/;"	v
sim_message_eventcallback_modulehandleinsensingpart	vrep_api/vrepConst.py	/^sim_message_eventcallback_modulehandleinsensingpart  =0x121   # called when simHandleModule in Lua is called with argument true $/;"	v
sim_message_eventcallback_moduleopen	vrep_api/vrepConst.py	/^sim_message_eventcallback_moduleopen    =0x106        # called when simOpenModule in Lua is called $/;"	v
sim_message_eventcallback_redoperformed	vrep_api/vrepConst.py	/^sim_message_eventcallback_redoperformed                 =0x11b   # the redo button was hit and a future state restored  $/;"	v
sim_message_eventcallback_refreshdialogs	vrep_api/vrepConst.py	/^sim_message_eventcallback_refreshdialogs             =0x125   # aux[0]=refresh degree (0=light 1=medium 2=full) $/;"	v
sim_message_eventcallback_renderingpass	vrep_api/vrepConst.py	/^sim_message_eventcallback_renderingpass              =0x122   # called just before the scene is rendered $/;"	v
sim_message_eventcallback_reserved1	vrep_api/vrepConst.py	/^sim_message_eventcallback_reserved1                  =0x114   # do not use $/;"	v
sim_message_eventcallback_reserved2	vrep_api/vrepConst.py	/^sim_message_eventcallback_reserved2                  =0x115   # do not use $/;"	v
sim_message_eventcallback_reserved3	vrep_api/vrepConst.py	/^sim_message_eventcallback_reserved3                  =0x116   # do not use $/;"	v
sim_message_eventcallback_reserved4	vrep_api/vrepConst.py	/^sim_message_eventcallback_reserved4                  =0x117   # do not use $/;"	v
sim_message_eventcallback_reserved5	vrep_api/vrepConst.py	/^sim_message_eventcallback_reserved5                     =0x11f   # do not use $/;"	v
sim_message_eventcallback_rmlposition	vrep_api/vrepConst.py	/^sim_message_eventcallback_rmlposition                =0x12b   #the command simRMLPosition was called. The appropriate plugin should handle the call$/;"	v
sim_message_eventcallback_rmlvelocity	vrep_api/vrepConst.py	/^sim_message_eventcallback_rmlvelocity                =0x12c   # the command simRMLVelocity was called. The appropriate plugin should handle the call$/;"	v
sim_message_eventcallback_sceneloaded	vrep_api/vrepConst.py	/^sim_message_eventcallback_sceneloaded                =0x126$/;"	v
sim_message_eventcallback_scenesave	vrep_api/vrepConst.py	/^sim_message_eventcallback_scenesave        =0x104        # about to save a scene $/;"	v
sim_message_eventcallback_scripticondblclick	vrep_api/vrepConst.py	/^sim_message_eventcallback_scripticondblclick         =0x11c   # scipt icon was double clicked.  (aux[0]=object handle associated with script set replyData[0] to 1 if script should not be opened)  $/;"	v
sim_message_eventcallback_simulationabouttostart	vrep_api/vrepConst.py	/^sim_message_eventcallback_simulationabouttostart     =0x11d$/;"	v
sim_message_eventcallback_simulationended	vrep_api/vrepConst.py	/^sim_message_eventcallback_simulationended            =0x11e$/;"	v
sim_message_eventcallback_undoperformed	vrep_api/vrepConst.py	/^sim_message_eventcallback_undoperformed                 =0x119   # the undo button was hit and a previous state restored $/;"	v
sim_message_for_c_api_only_start	vrep_api/vrepConst.py	/^sim_message_for_c_api_only_start        =0x100      # Do not use $/;"	v
sim_message_keypress	vrep_api/vrepConst.py	/^sim_message_keypress                =6    # a key was pressed while the focus was on a page (aux[0]=key aux[1]=ctrl and shift key state) $/;"	v
sim_message_model_loaded	vrep_api/vrepConst.py	/^sim_message_model_loaded            =4$/;"	v
sim_message_object_selection_changed	vrep_api/vrepConst.py	/^sim_message_object_selection_changed=2$/;"	v
sim_message_reserved1	vrep_api/vrepConst.py	/^sim_message_reserved1                   =0x101      # Do not use $/;"	v
sim_message_reserved10	vrep_api/vrepConst.py	/^sim_message_reserved10                =3    # do not use $/;"	v
sim_message_reserved11	vrep_api/vrepConst.py	/^sim_message_reserved11                =5    # do not use $/;"	v
sim_message_reserved2	vrep_api/vrepConst.py	/^sim_message_reserved2                    =0x102      # Do not use $/;"	v
sim_message_reserved3	vrep_api/vrepConst.py	/^sim_message_reserved3                    =0x103      # Do not use $/;"	v
sim_message_reserved4	vrep_api/vrepConst.py	/^sim_message_reserved4                    =0x109      # Do not use $/;"	v
sim_message_reserved5	vrep_api/vrepConst.py	/^sim_message_reserved5                    =0x10a        # Do not use $/;"	v
sim_message_reserved6	vrep_api/vrepConst.py	/^sim_message_reserved6                    =0x10b        # Do not use $/;"	v
sim_message_reserved7	vrep_api/vrepConst.py	/^sim_message_reserved7                    =0x10c        # Do not use $/;"	v
sim_message_reserved9	vrep_api/vrepConst.py	/^sim_message_reserved9               =1    # Do not use $/;"	v
sim_message_simulation_pause_request	vrep_api/vrepConst.py	/^sim_message_simulation_pause_request                 =0x1001$/;"	v
sim_message_simulation_start_resume_request	vrep_api/vrepConst.py	/^sim_message_simulation_start_resume_request          =0x1000$/;"	v
sim_message_simulation_stop_request	vrep_api/vrepConst.py	/^sim_message_simulation_stop_request                  =0x1002$/;"	v
sim_message_ui_button_state_change	vrep_api/vrepConst.py	/^sim_message_ui_button_state_change  =0    # a UI button slider etc. changed (due to a user's action). aux[0]=UI handle aux[1]=button handle aux[2]=button attributes aux[3]=slider position (if slider) $/;"	v
sim_mill_cone_subtype	vrep_api/vrepConst.py	/^sim_mill_cone_subtype               =42$/;"	v
sim_mill_cylinder_subtype	vrep_api/vrepConst.py	/^sim_mill_cylinder_subtype           =41$/;"	v
sim_mill_disc_subtype	vrep_api/vrepConst.py	/^sim_mill_disc_subtype               =42$/;"	v
sim_mill_pyramid_subtype	vrep_api/vrepConst.py	/^sim_mill_pyramid_subtype            =40$/;"	v
sim_mirrorfloatparam_height	vrep_api/vrepConst.py	/^sim_mirrorfloatparam_height= 12001$/;"	v
sim_mirrorfloatparam_reflectance	vrep_api/vrepConst.py	/^sim_mirrorfloatparam_reflectance= 12002$/;"	v
sim_mirrorfloatparam_width	vrep_api/vrepConst.py	/^sim_mirrorfloatparam_width= 12000$/;"	v
sim_mirrorintparam_enable	vrep_api/vrepConst.py	/^sim_mirrorintparam_enable= 12003$/;"	v
sim_modelproperty_not_collidable	vrep_api/vrepConst.py	/^sim_modelproperty_not_collidable                =0x0001$/;"	v
sim_modelproperty_not_cuttable	vrep_api/vrepConst.py	/^sim_modelproperty_not_cuttable                    =0x0010$/;"	v
sim_modelproperty_not_detectable	vrep_api/vrepConst.py	/^sim_modelproperty_not_detectable                =0x0008$/;"	v
sim_modelproperty_not_dynamic	vrep_api/vrepConst.py	/^sim_modelproperty_not_dynamic                    =0x0020$/;"	v
sim_modelproperty_not_measurable	vrep_api/vrepConst.py	/^sim_modelproperty_not_measurable                =0x0002$/;"	v
sim_modelproperty_not_model	vrep_api/vrepConst.py	/^sim_modelproperty_not_model                        =0xf000 # object is not a model $/;"	v
sim_modelproperty_not_renderable	vrep_api/vrepConst.py	/^sim_modelproperty_not_renderable                =0x0004$/;"	v
sim_modelproperty_not_reset	vrep_api/vrepConst.py	/^sim_modelproperty_not_reset                        =0x0080 # Model is not reset at simulation end. This flag is cleared at simulation end $/;"	v
sim_modelproperty_not_respondable	vrep_api/vrepConst.py	/^sim_modelproperty_not_respondable                =0x0040 # cannot be selected if sim_modelproperty_not_dynamic is not selected $/;"	v
sim_modelproperty_not_visible	vrep_api/vrepConst.py	/^sim_modelproperty_not_visible                    =0x0100 # Whole model is invisible independent of local visibility settings $/;"	v
sim_mplanintparam_clear_nodes	vrep_api/vrepConst.py	/^sim_mplanintparam_clear_nodes= 25002$/;"	v
sim_mplanintparam_nodes_computed	vrep_api/vrepConst.py	/^sim_mplanintparam_nodes_computed= 25000$/;"	v
sim_mplanintparam_prepare_nodes	vrep_api/vrepConst.py	/^sim_mplanintparam_prepare_nodes= 25001$/;"	v
sim_navigation_cameraangle	vrep_api/vrepConst.py	/^sim_navigation_cameraangle                =0x0005$/;"	v
sim_navigation_camerafly	vrep_api/vrepConst.py	/^sim_navigation_camerafly                =0x0006$/;"	v
sim_navigation_camerarotate	vrep_api/vrepConst.py	/^sim_navigation_camerarotate                =0x0002$/;"	v
sim_navigation_camerarotaterightbutton	vrep_api/vrepConst.py	/^sim_navigation_camerarotaterightbutton    =0x2000$/;"	v
sim_navigation_camerashift	vrep_api/vrepConst.py	/^sim_navigation_camerashift                =0x0001$/;"	v
sim_navigation_cameratilt	vrep_api/vrepConst.py	/^sim_navigation_cameratilt                =0x0004$/;"	v
sim_navigation_camerazoom	vrep_api/vrepConst.py	/^sim_navigation_camerazoom                =0x0003$/;"	v
sim_navigation_camerazoomwheel	vrep_api/vrepConst.py	/^sim_navigation_camerazoomwheel            =0x1000$/;"	v
sim_navigation_clickselection	vrep_api/vrepConst.py	/^sim_navigation_clickselection            =0x0200$/;"	v
sim_navigation_ctrlselection	vrep_api/vrepConst.py	/^sim_navigation_ctrlselection            =0x0400$/;"	v
sim_navigation_ikmanip	vrep_api/vrepConst.py	/^sim_navigation_ikmanip                    =0x000C$/;"	v
sim_navigation_jointpathtest	vrep_api/vrepConst.py	/^sim_navigation_jointpathtest            =0x000B$/;"	v
sim_navigation_objectmultipleselection	vrep_api/vrepConst.py	/^sim_navigation_objectmultipleselection    =0x000D$/;"	v
sim_navigation_objectrotate	vrep_api/vrepConst.py	/^sim_navigation_objectrotate                =0x0008$/;"	v
sim_navigation_objectshift	vrep_api/vrepConst.py	/^sim_navigation_objectshift                =0x0007$/;"	v
sim_navigation_passive	vrep_api/vrepConst.py	/^sim_navigation_passive                    =0x0000$/;"	v
sim_navigation_reserved2	vrep_api/vrepConst.py	/^sim_navigation_reserved2                =0x0009$/;"	v
sim_navigation_reserved3	vrep_api/vrepConst.py	/^sim_navigation_reserved3                =0x000A$/;"	v
sim_navigation_reserved4	vrep_api/vrepConst.py	/^sim_navigation_reserved4                =0x0100$/;"	v
sim_navigation_shiftselection	vrep_api/vrepConst.py	/^sim_navigation_shiftselection            =0x0800$/;"	v
sim_object_camera_type	vrep_api/vrepConst.py	/^sim_object_camera_type          =3$/;"	v
sim_object_dummy_type	vrep_api/vrepConst.py	/^sim_object_dummy_type           =4$/;"	v
sim_object_forcesensor_type	vrep_api/vrepConst.py	/^sim_object_forcesensor_type     =12$/;"	v
sim_object_graph_type	vrep_api/vrepConst.py	/^sim_object_graph_type           =2$/;"	v
sim_object_joint_type	vrep_api/vrepConst.py	/^sim_object_joint_type           =1$/;"	v
sim_object_light_type	vrep_api/vrepConst.py	/^sim_object_light_type           =13$/;"	v
sim_object_mill_type	vrep_api/vrepConst.py	/^sim_object_mill_type            =11$/;"	v
sim_object_mirror_type	vrep_api/vrepConst.py	/^sim_object_mirror_type          =14$/;"	v
sim_object_no_subtype	vrep_api/vrepConst.py	/^sim_object_no_subtype               =200$/;"	v
sim_object_path_type	vrep_api/vrepConst.py	/^sim_object_path_type            =8$/;"	v
sim_object_proximitysensor_type	vrep_api/vrepConst.py	/^sim_object_proximitysensor_type =5$/;"	v
sim_object_reserved1	vrep_api/vrepConst.py	/^sim_object_reserved1            =6$/;"	v
sim_object_reserved2	vrep_api/vrepConst.py	/^sim_object_reserved2            =7$/;"	v
sim_object_shape_type	vrep_api/vrepConst.py	/^sim_object_shape_type           =0$/;"	v
sim_object_visionsensor_type	vrep_api/vrepConst.py	/^sim_object_visionsensor_type    =9$/;"	v
sim_object_volume_type	vrep_api/vrepConst.py	/^sim_object_volume_type          =10$/;"	v
sim_objectproperty_canupdatedna	vrep_api/vrepConst.py	/^sim_objectproperty_canupdatedna                =0x0400$/;"	v
sim_objectproperty_collapsed	vrep_api/vrepConst.py	/^sim_objectproperty_collapsed                =0x0010$/;"	v
sim_objectproperty_depthinvisible	vrep_api/vrepConst.py	/^sim_objectproperty_depthinvisible            =0x1000$/;"	v
sim_objectproperty_dontshowasinsidemodel	vrep_api/vrepConst.py	/^sim_objectproperty_dontshowasinsidemodel    =0x0100$/;"	v
sim_objectproperty_reserved1	vrep_api/vrepConst.py	/^sim_objectproperty_reserved1                =0x0000$/;"	v
sim_objectproperty_reserved2	vrep_api/vrepConst.py	/^sim_objectproperty_reserved2                =0x0001$/;"	v
sim_objectproperty_reserved3	vrep_api/vrepConst.py	/^sim_objectproperty_reserved3                =0x0002$/;"	v
sim_objectproperty_reserved4	vrep_api/vrepConst.py	/^sim_objectproperty_reserved4                =0x0003$/;"	v
sim_objectproperty_reserved5	vrep_api/vrepConst.py	/^sim_objectproperty_reserved5                =0x0004 # formely sim_objectproperty_visible $/;"	v
sim_objectproperty_reserved6	vrep_api/vrepConst.py	/^sim_objectproperty_reserved6                =0x0008 # formely sim_objectproperty_wireframe $/;"	v
sim_objectproperty_reserved7	vrep_api/vrepConst.py	/^sim_objectproperty_reserved7                =0x0040$/;"	v
sim_objectproperty_selectable	vrep_api/vrepConst.py	/^sim_objectproperty_selectable                =0x0020$/;"	v
sim_objectproperty_selectinvisible	vrep_api/vrepConst.py	/^sim_objectproperty_selectinvisible            =0x0800$/;"	v
sim_objectproperty_selectmodelbaseinstead	vrep_api/vrepConst.py	/^sim_objectproperty_selectmodelbaseinstead    =0x0080$/;"	v
sim_objectspecialproperty_collidable	vrep_api/vrepConst.py	/^sim_objectspecialproperty_collidable                    =0x0001$/;"	v
sim_objectspecialproperty_cuttable	vrep_api/vrepConst.py	/^sim_objectspecialproperty_cuttable                        =0x0400$/;"	v
sim_objectspecialproperty_detectable_all	vrep_api/vrepConst.py	/^sim_objectspecialproperty_detectable_all =sim_objectspecialproperty_detectable_ultrasonic|sim_objectspecialproperty_detectable_infrared|sim_objectspecialproperty_detectable_laser|sim_objectspecialproperty_detectable_inductive|sim_objectspecialproperty_detectable_capacitive$/;"	v
sim_objectspecialproperty_detectable_capacitive	vrep_api/vrepConst.py	/^sim_objectspecialproperty_detectable_capacitive            =0x0100$/;"	v
sim_objectspecialproperty_detectable_inductive	vrep_api/vrepConst.py	/^sim_objectspecialproperty_detectable_inductive            =0x0080$/;"	v
sim_objectspecialproperty_detectable_infrared	vrep_api/vrepConst.py	/^sim_objectspecialproperty_detectable_infrared            =0x0020$/;"	v
sim_objectspecialproperty_detectable_laser	vrep_api/vrepConst.py	/^sim_objectspecialproperty_detectable_laser                =0x0040$/;"	v
sim_objectspecialproperty_detectable_ultrasonic	vrep_api/vrepConst.py	/^sim_objectspecialproperty_detectable_ultrasonic            =0x0010$/;"	v
sim_objectspecialproperty_measurable	vrep_api/vrepConst.py	/^sim_objectspecialproperty_measurable                    =0x0002$/;"	v
sim_objectspecialproperty_pathplanning_ignored	vrep_api/vrepConst.py	/^sim_objectspecialproperty_pathplanning_ignored            =0x0800$/;"	v
sim_objectspecialproperty_renderable	vrep_api/vrepConst.py	/^sim_objectspecialproperty_renderable                    =0x0200$/;"	v
sim_objfloatparam_abs_rot_velocity	vrep_api/vrepConst.py	/^sim_objfloatparam_abs_rot_velocity= 14$/;"	v
sim_objfloatparam_abs_x_velocity	vrep_api/vrepConst.py	/^sim_objfloatparam_abs_x_velocity= 11$/;"	v
sim_objfloatparam_abs_y_velocity	vrep_api/vrepConst.py	/^sim_objfloatparam_abs_y_velocity= 12$/;"	v
sim_objfloatparam_abs_z_velocity	vrep_api/vrepConst.py	/^sim_objfloatparam_abs_z_velocity= 13$/;"	v
sim_objfloatparam_modelbbox_max_x	vrep_api/vrepConst.py	/^sim_objfloatparam_modelbbox_max_x= 24$/;"	v
sim_objfloatparam_modelbbox_max_y	vrep_api/vrepConst.py	/^sim_objfloatparam_modelbbox_max_y= 25$/;"	v
sim_objfloatparam_modelbbox_max_z	vrep_api/vrepConst.py	/^sim_objfloatparam_modelbbox_max_z= 26$/;"	v
sim_objfloatparam_modelbbox_min_x	vrep_api/vrepConst.py	/^sim_objfloatparam_modelbbox_min_x= 21$/;"	v
sim_objfloatparam_modelbbox_min_y	vrep_api/vrepConst.py	/^sim_objfloatparam_modelbbox_min_y= 22$/;"	v
sim_objfloatparam_modelbbox_min_z	vrep_api/vrepConst.py	/^sim_objfloatparam_modelbbox_min_z= 23$/;"	v
sim_objfloatparam_objbbox_max_x	vrep_api/vrepConst.py	/^sim_objfloatparam_objbbox_max_x= 18$/;"	v
sim_objfloatparam_objbbox_max_y	vrep_api/vrepConst.py	/^sim_objfloatparam_objbbox_max_y= 19$/;"	v
sim_objfloatparam_objbbox_max_z	vrep_api/vrepConst.py	/^sim_objfloatparam_objbbox_max_z= 20$/;"	v
sim_objfloatparam_objbbox_min_x	vrep_api/vrepConst.py	/^sim_objfloatparam_objbbox_min_x= 15$/;"	v
sim_objfloatparam_objbbox_min_y	vrep_api/vrepConst.py	/^sim_objfloatparam_objbbox_min_y= 16$/;"	v
sim_objfloatparam_objbbox_min_z	vrep_api/vrepConst.py	/^sim_objfloatparam_objbbox_min_z= 17$/;"	v
sim_objfloatparam_transparency_offset	vrep_api/vrepConst.py	/^sim_objfloatparam_transparency_offset= 28$/;"	v
sim_objintparam_child_role	vrep_api/vrepConst.py	/^sim_objintparam_child_role= 29$/;"	v
sim_objintparam_collection_self_collision_indicator	vrep_api/vrepConst.py	/^sim_objintparam_collection_self_collision_indicator= 27$/;"	v
sim_objintparam_illumination_handle	vrep_api/vrepConst.py	/^sim_objintparam_illumination_handle= 32$/;"	v
sim_objintparam_manipulation_permissions	vrep_api/vrepConst.py	/^sim_objintparam_manipulation_permissions= 31$/;"	v
sim_objintparam_parent_role	vrep_api/vrepConst.py	/^sim_objintparam_parent_role= 30$/;"	v
sim_objintparam_visibility_layer	vrep_api/vrepConst.py	/^sim_objintparam_visibility_layer= 10$/;"	v
sim_particle_cyclic	vrep_api/vrepConst.py	/^sim_particle_cyclic                    =0x2000 # if the max item count was reached then the first items are overwritten. $/;"	v
sim_particle_emissioncolor	vrep_api/vrepConst.py	/^sim_particle_emissioncolor            =0x4000 # When used in combination with sim_particle_itemcolors then the specified colors will be for the emissive component $/;"	v
sim_particle_ignoresgravity	vrep_api/vrepConst.py	/^sim_particle_ignoresgravity            =0x0100 # the particles ignore the effect of gravity. Not compatible with sim_particle_water $/;"	v
sim_particle_invisible	vrep_api/vrepConst.py	/^sim_particle_invisible                =0x0200 # the particles are invisible $/;"	v
sim_particle_itemcolors	vrep_api/vrepConst.py	/^sim_particle_itemcolors                =0x1000 # +3 values per particle (each particle can have a different color) $/;"	v
sim_particle_itemdensities	vrep_api/vrepConst.py	/^sim_particle_itemdensities            =0x0800 # +1 value per particle (each particle can have a different density) $/;"	v
sim_particle_itemsizes	vrep_api/vrepConst.py	/^sim_particle_itemsizes                =0x0400 # +1 value per particle (each particle can have a different size) $/;"	v
sim_particle_painttag	vrep_api/vrepConst.py	/^sim_particle_painttag                =0x10000 # The particles can be seen by vision sensors (sim_particle_invisible must not be set) $/;"	v
sim_particle_particlerespondable	vrep_api/vrepConst.py	/^sim_particle_particlerespondable    =0x0080 # the particles are respondable against each other $/;"	v
sim_particle_points1	vrep_api/vrepConst.py	/^sim_particle_points1        =0  # 6 values per point (pt1 and pt2. Pt1 is start position pt2-pt1 is the initial velocity vector). i$/;"	v
sim_particle_points2	vrep_api/vrepConst.py	/^sim_particle_points2        =1    # 6 values per point. Point is 2 pixel big. Only appearance is a point internally handled as a perfect sphere $/;"	v
sim_particle_points4	vrep_api/vrepConst.py	/^sim_particle_points4        =2    # 6 values per point. Point is 4 pixel big. Only appearance is a point internally handled as a perfect sphere $/;"	v
sim_particle_respondable1to4	vrep_api/vrepConst.py	/^sim_particle_respondable1to4        =0x0020 # the particles are respondable against shapes (against all objects that have at least one bit 1-4 activated in the global respondable mask) $/;"	v
sim_particle_respondable5to8	vrep_api/vrepConst.py	/^sim_particle_respondable5to8        =0x0040 # the particles are respondable against shapes (against all objects that have at least one bit 5-8 activated in the global respondable mask) $/;"	v
sim_particle_roughspheres	vrep_api/vrepConst.py	/^sim_particle_roughspheres    =3    # 6 values per sphere. Only appearance is rough. Internally a perfect sphere $/;"	v
sim_particle_spheres	vrep_api/vrepConst.py	/^sim_particle_spheres        =4    # 6 values per sphere. Internally a perfect sphere $/;"	v
sim_particle_water	vrep_api/vrepConst.py	/^sim_particle_water                    =0x8000 # the particles are water particles (no weight in the water (i.e. when z<0)). Not compatible with sim_particle_ignoresgravity $/;"	v
sim_pathproperty_auto_velocity_profile_rotation	vrep_api/vrepConst.py	/^sim_pathproperty_auto_velocity_profile_rotation        =0x0200$/;"	v
sim_pathproperty_auto_velocity_profile_translation	vrep_api/vrepConst.py	/^sim_pathproperty_auto_velocity_profile_translation    =0x0100$/;"	v
sim_pathproperty_automatic_orientation	vrep_api/vrepConst.py	/^sim_pathproperty_automatic_orientation                =0x0008$/;"	v
sim_pathproperty_closed_path	vrep_api/vrepConst.py	/^sim_pathproperty_closed_path                        =0x0004$/;"	v
sim_pathproperty_endpoints_at_zero	vrep_api/vrepConst.py	/^sim_pathproperty_endpoints_at_zero                    =0x0400$/;"	v
sim_pathproperty_flat_path	vrep_api/vrepConst.py	/^sim_pathproperty_flat_path                            =0x0040$/;"	v
sim_pathproperty_infinite_acceleration	vrep_api/vrepConst.py	/^sim_pathproperty_infinite_acceleration                =0x0020$/;"	v
sim_pathproperty_invert_velocity	vrep_api/vrepConst.py	/^sim_pathproperty_invert_velocity                    =0x0010$/;"	v
sim_pathproperty_keep_x_up	vrep_api/vrepConst.py	/^sim_pathproperty_keep_x_up                            =0x0800$/;"	v
sim_pathproperty_show_line	vrep_api/vrepConst.py	/^sim_pathproperty_show_line                            =0x0001$/;"	v
sim_pathproperty_show_orientation	vrep_api/vrepConst.py	/^sim_pathproperty_show_orientation                    =0x0002$/;"	v
sim_pathproperty_show_position	vrep_api/vrepConst.py	/^sim_pathproperty_show_position                        =0x0080$/;"	v
sim_pplanfloatparam_delta_min	vrep_api/vrepConst.py	/^sim_pplanfloatparam_delta_min= 20006$/;"	v
sim_pplanfloatparam_delta_range	vrep_api/vrepConst.py	/^sim_pplanfloatparam_delta_range= 20007$/;"	v
sim_pplanfloatparam_x_min	vrep_api/vrepConst.py	/^sim_pplanfloatparam_x_min= 20000$/;"	v
sim_pplanfloatparam_x_range	vrep_api/vrepConst.py	/^sim_pplanfloatparam_x_range= 20001$/;"	v
sim_pplanfloatparam_y_min	vrep_api/vrepConst.py	/^sim_pplanfloatparam_y_min= 20002$/;"	v
sim_pplanfloatparam_y_range	vrep_api/vrepConst.py	/^sim_pplanfloatparam_y_range= 20003$/;"	v
sim_pplanfloatparam_z_min	vrep_api/vrepConst.py	/^sim_pplanfloatparam_z_min= 20004$/;"	v
sim_pplanfloatparam_z_range	vrep_api/vrepConst.py	/^sim_pplanfloatparam_z_range= 20005$/;"	v
sim_proximitysensor_cone_subtype	vrep_api/vrepConst.py	/^sim_proximitysensor_cone_subtype    =33$/;"	v
sim_proximitysensor_cylinder_subtype	vrep_api/vrepConst.py	/^sim_proximitysensor_cylinder_subtype=31$/;"	v
sim_proximitysensor_disc_subtype	vrep_api/vrepConst.py	/^sim_proximitysensor_disc_subtype    =32$/;"	v
sim_proximitysensor_pyramid_subtype	vrep_api/vrepConst.py	/^sim_proximitysensor_pyramid_subtype =30$/;"	v
sim_proximitysensor_ray_subtype	vrep_api/vrepConst.py	/^sim_proximitysensor_ray_subtype     =34$/;"	v
sim_proxintparam_ray_invisibility	vrep_api/vrepConst.py	/^sim_proxintparam_ray_invisibility= 4000$/;"	v
sim_reserved0	vrep_api/vrepConst.py	/^sim_reserved0                                   =14$/;"	v
sim_script_call_error	vrep_api/vrepConst.py	/^sim_script_call_error                =16$/;"	v
sim_script_lua_error	vrep_api/vrepConst.py	/^sim_script_lua_error                =8$/;"	v
sim_script_main_script_nonexistent	vrep_api/vrepConst.py	/^sim_script_main_script_nonexistent    =1$/;"	v
sim_script_main_script_not_called	vrep_api/vrepConst.py	/^sim_script_main_script_not_called    =2$/;"	v
sim_script_no_error	vrep_api/vrepConst.py	/^sim_script_no_error                    =0$/;"	v
sim_script_reentrance_error	vrep_api/vrepConst.py	/^sim_script_reentrance_error            =4$/;"	v
sim_scripttype_childscript	vrep_api/vrepConst.py	/^sim_scripttype_childscript  =1$/;"	v
sim_scripttype_contactcallback	vrep_api/vrepConst.py	/^sim_scripttype_contactcallback  =5$/;"	v
sim_scripttype_customizationscript	vrep_api/vrepConst.py	/^sim_scripttype_customizationscript  =6$/;"	v
sim_scripttype_generalcallback	vrep_api/vrepConst.py	/^sim_scripttype_generalcallback  =7$/;"	v
sim_scripttype_jointctrlcallback	vrep_api/vrepConst.py	/^sim_scripttype_jointctrlcallback  =4$/;"	v
sim_scripttype_mainscript	vrep_api/vrepConst.py	/^sim_scripttype_mainscript   =0$/;"	v
sim_shape_multishape_subtype	vrep_api/vrepConst.py	/^sim_shape_multishape_subtype        =21$/;"	v
sim_shape_simpleshape_subtype	vrep_api/vrepConst.py	/^sim_shape_simpleshape_subtype       =20$/;"	v
sim_shapefloatparam_edge_angle	vrep_api/vrepConst.py	/^sim_shapefloatparam_edge_angle= 3026$/;"	v
sim_shapefloatparam_init_velocity_a	vrep_api/vrepConst.py	/^sim_shapefloatparam_init_velocity_a= 3020$/;"	v
sim_shapefloatparam_init_velocity_b	vrep_api/vrepConst.py	/^sim_shapefloatparam_init_velocity_b= 3021$/;"	v
sim_shapefloatparam_init_velocity_g	vrep_api/vrepConst.py	/^sim_shapefloatparam_init_velocity_g= 3022$/;"	v
sim_shapefloatparam_init_velocity_x	vrep_api/vrepConst.py	/^sim_shapefloatparam_init_velocity_x= 3000$/;"	v
sim_shapefloatparam_init_velocity_y	vrep_api/vrepConst.py	/^sim_shapefloatparam_init_velocity_y= 3001$/;"	v
sim_shapefloatparam_init_velocity_z	vrep_api/vrepConst.py	/^sim_shapefloatparam_init_velocity_z= 3002$/;"	v
sim_shapefloatparam_mass	vrep_api/vrepConst.py	/^sim_shapefloatparam_mass= 3005$/;"	v
sim_shapefloatparam_shading_angle	vrep_api/vrepConst.py	/^sim_shapefloatparam_shading_angle= 3025$/;"	v
sim_shapefloatparam_texture_a	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_a= 3009$/;"	v
sim_shapefloatparam_texture_b	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_b= 3010$/;"	v
sim_shapefloatparam_texture_g	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_g= 3011$/;"	v
sim_shapefloatparam_texture_scaling_x	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_scaling_x= 3012$/;"	v
sim_shapefloatparam_texture_scaling_y	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_scaling_y= 3013$/;"	v
sim_shapefloatparam_texture_x	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_x= 3006$/;"	v
sim_shapefloatparam_texture_y	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_y= 3007$/;"	v
sim_shapefloatparam_texture_z	vrep_api/vrepConst.py	/^sim_shapefloatparam_texture_z= 3008$/;"	v
sim_shapeintparam_compound	vrep_api/vrepConst.py	/^sim_shapeintparam_compound= 3016$/;"	v
sim_shapeintparam_convex	vrep_api/vrepConst.py	/^sim_shapeintparam_convex= 3017$/;"	v
sim_shapeintparam_convex_check	vrep_api/vrepConst.py	/^sim_shapeintparam_convex_check= 3018$/;"	v
sim_shapeintparam_culling	vrep_api/vrepConst.py	/^sim_shapeintparam_culling= 3014$/;"	v
sim_shapeintparam_edge_borders_hidden	vrep_api/vrepConst.py	/^sim_shapeintparam_edge_borders_hidden= 3027$/;"	v
sim_shapeintparam_edge_visibility	vrep_api/vrepConst.py	/^sim_shapeintparam_edge_visibility= 3024$/;"	v
sim_shapeintparam_respondable	vrep_api/vrepConst.py	/^sim_shapeintparam_respondable= 3004$/;"	v
sim_shapeintparam_respondable_mask	vrep_api/vrepConst.py	/^sim_shapeintparam_respondable_mask= 3019$/;"	v
sim_shapeintparam_static	vrep_api/vrepConst.py	/^sim_shapeintparam_static= 3003$/;"	v
sim_shapeintparam_wireframe	vrep_api/vrepConst.py	/^sim_shapeintparam_wireframe= 3015$/;"	v
sim_shapestringparam_color_name	vrep_api/vrepConst.py	/^sim_shapestringparam_color_name= 3023$/;"	v
sim_simulation_advancing	vrep_api/vrepConst.py	/^sim_simulation_advancing                    =0x10                                # Simulation is advancing $/;"	v
sim_simulation_advancing_abouttostop	vrep_api/vrepConst.py	/^sim_simulation_advancing_abouttostop        =sim_simulation_advancing|0x05        # "Trying to stop" simulation pass (>=1x) $/;"	v
sim_simulation_advancing_firstafterpause	vrep_api/vrepConst.py	/^sim_simulation_advancing_firstafterpause    =sim_simulation_advancing|0x04        # First simulation pass after pause (1x) $/;"	v
sim_simulation_advancing_firstafterstop	vrep_api/vrepConst.py	/^sim_simulation_advancing_firstafterstop        =sim_simulation_advancing|0x00        # First simulation pass (1x) $/;"	v
sim_simulation_advancing_lastbeforepause	vrep_api/vrepConst.py	/^sim_simulation_advancing_lastbeforepause    =sim_simulation_advancing|0x03        # Last simulation pass before pause (1x) $/;"	v
sim_simulation_advancing_lastbeforestop	vrep_api/vrepConst.py	/^sim_simulation_advancing_lastbeforestop        =sim_simulation_advancing|0x06        # Last simulation pass (1x) $/;"	v
sim_simulation_advancing_running	vrep_api/vrepConst.py	/^sim_simulation_advancing_running            =sim_simulation_advancing|0x01        # Normal simulation pass (>=1x) $/;"	v
sim_simulation_paused	vrep_api/vrepConst.py	/^sim_simulation_paused                        =0x08                                # Simulation is paused $/;"	v
sim_simulation_stopped	vrep_api/vrepConst.py	/^sim_simulation_stopped                        =0x00                                # Simulation is stopped $/;"	v
sim_stringparam_app_arg1	vrep_api/vrepConst.py	/^sim_stringparam_app_arg1            =2$/;"	v
sim_stringparam_app_arg2	vrep_api/vrepConst.py	/^sim_stringparam_app_arg2            =3$/;"	v
sim_stringparam_app_arg3	vrep_api/vrepConst.py	/^sim_stringparam_app_arg3            =4$/;"	v
sim_stringparam_app_arg4	vrep_api/vrepConst.py	/^sim_stringparam_app_arg4            =5$/;"	v
sim_stringparam_app_arg5	vrep_api/vrepConst.py	/^sim_stringparam_app_arg5            =6$/;"	v
sim_stringparam_app_arg6	vrep_api/vrepConst.py	/^sim_stringparam_app_arg6            =7$/;"	v
sim_stringparam_app_arg7	vrep_api/vrepConst.py	/^sim_stringparam_app_arg7            =8$/;"	v
sim_stringparam_app_arg8	vrep_api/vrepConst.py	/^sim_stringparam_app_arg8            =9$/;"	v
sim_stringparam_app_arg9	vrep_api/vrepConst.py	/^sim_stringparam_app_arg9            =10$/;"	v
sim_stringparam_application_path	vrep_api/vrepConst.py	/^sim_stringparam_application_path=0 # path of V-REP's executable $/;"	v
sim_stringparam_scene_path_and_name	vrep_api/vrepConst.py	/^sim_stringparam_scene_path_and_name    =13$/;"	v
sim_stringparam_video_filename	vrep_api/vrepConst.py	/^sim_stringparam_video_filename=1$/;"	v
sim_ui_menu_close	vrep_api/vrepConst.py	/^sim_ui_menu_close        =4$/;"	v
sim_ui_menu_minimize	vrep_api/vrepConst.py	/^sim_ui_menu_minimize    =2$/;"	v
sim_ui_menu_systemblock	vrep_api/vrepConst.py	/^sim_ui_menu_systemblock =8$/;"	v
sim_ui_menu_title	vrep_api/vrepConst.py	/^sim_ui_menu_title        =1$/;"	v
sim_ui_property_fixedwidthfont	vrep_api/vrepConst.py	/^sim_ui_property_fixedwidthfont                =0x0020$/;"	v
sim_ui_property_moveable	vrep_api/vrepConst.py	/^sim_ui_property_moveable                    =0x0004$/;"	v
sim_ui_property_relativetoleftborder	vrep_api/vrepConst.py	/^sim_ui_property_relativetoleftborder        =0x0008$/;"	v
sim_ui_property_relativetotopborder	vrep_api/vrepConst.py	/^sim_ui_property_relativetotopborder            =0x0010$/;"	v
sim_ui_property_rolledup	vrep_api/vrepConst.py	/^sim_ui_property_rolledup                    =0x0100$/;"	v
sim_ui_property_selectassociatedobject	vrep_api/vrepConst.py	/^sim_ui_property_selectassociatedobject        =0x0200$/;"	v
sim_ui_property_settocenter	vrep_api/vrepConst.py	/^sim_ui_property_settocenter                    =0x0080$/;"	v
sim_ui_property_systemblock	vrep_api/vrepConst.py	/^sim_ui_property_systemblock                    =0x0040$/;"	v
sim_ui_property_visible	vrep_api/vrepConst.py	/^sim_ui_property_visible                        =0x0001$/;"	v
sim_ui_property_visibleduringsimulationonly	vrep_api/vrepConst.py	/^sim_ui_property_visibleduringsimulationonly    =0x0002$/;"	v
sim_ui_property_visiblewhenobjectselected	vrep_api/vrepConst.py	/^sim_ui_property_visiblewhenobjectselected    =0x0400$/;"	v
sim_visionfloatparam_far_clipping	vrep_api/vrepConst.py	/^sim_visionfloatparam_far_clipping= 1001$/;"	v
sim_visionfloatparam_near_clipping	vrep_api/vrepConst.py	/^sim_visionfloatparam_near_clipping= 1000$/;"	v
sim_visionfloatparam_ortho_size	vrep_api/vrepConst.py	/^sim_visionfloatparam_ortho_size= 1005$/;"	v
sim_visionfloatparam_perspective_angle	vrep_api/vrepConst.py	/^sim_visionfloatparam_perspective_angle= 1004$/;"	v
sim_visionfloatparam_pov_aperture	vrep_api/vrepConst.py	/^sim_visionfloatparam_pov_aperture= 1015$/;"	v
sim_visionfloatparam_pov_blur_distance	vrep_api/vrepConst.py	/^sim_visionfloatparam_pov_blur_distance= 1014$/;"	v
sim_visionintparam_disabled_light_components	vrep_api/vrepConst.py	/^sim_visionintparam_disabled_light_components= 1006$/;"	v
sim_visionintparam_entity_to_render	vrep_api/vrepConst.py	/^sim_visionintparam_entity_to_render= 1008$/;"	v
sim_visionintparam_pov_blur_sampled	vrep_api/vrepConst.py	/^sim_visionintparam_pov_blur_sampled= 1016$/;"	v
sim_visionintparam_pov_focal_blur	vrep_api/vrepConst.py	/^sim_visionintparam_pov_focal_blur= 1013$/;"	v
sim_visionintparam_render_mode	vrep_api/vrepConst.py	/^sim_visionintparam_render_mode= 1017$/;"	v
sim_visionintparam_rendering_attributes	vrep_api/vrepConst.py	/^sim_visionintparam_rendering_attributes= 1007$/;"	v
sim_visionintparam_resolution_x	vrep_api/vrepConst.py	/^sim_visionintparam_resolution_x= 1002$/;"	v
sim_visionintparam_resolution_y	vrep_api/vrepConst.py	/^sim_visionintparam_resolution_y= 1003$/;"	v
sim_visionintparam_windowed_pos_x	vrep_api/vrepConst.py	/^sim_visionintparam_windowed_pos_x= 1011$/;"	v
sim_visionintparam_windowed_pos_y	vrep_api/vrepConst.py	/^sim_visionintparam_windowed_pos_y= 1012$/;"	v
sim_visionintparam_windowed_size_x	vrep_api/vrepConst.py	/^sim_visionintparam_windowed_size_x= 1009$/;"	v
sim_visionintparam_windowed_size_y	vrep_api/vrepConst.py	/^sim_visionintparam_windowed_size_y= 1010$/;"	v
simxAddStatusbarMessage	vrep_api/vrep.py	/^def simxAddStatusbarMessage(clientID, message, operationMode):$/;"	f
simxAppendStringSignal	vrep_api/vrep.py	/^def simxAppendStringSignal(clientID, signalName, signalValue, operationMode):$/;"	f
simxAuxiliaryConsoleClose	vrep_api/vrep.py	/^def simxAuxiliaryConsoleClose(clientID, consoleHandle, operationMode):$/;"	f
simxAuxiliaryConsoleOpen	vrep_api/vrep.py	/^def simxAuxiliaryConsoleOpen(clientID, title, maxLines, mode, position, size, textColor, backgroundColor, operationMode):$/;"	f
simxAuxiliaryConsolePrint	vrep_api/vrep.py	/^def simxAuxiliaryConsolePrint(clientID, consoleHandle, txt, operationMode):$/;"	f
simxAuxiliaryConsoleShow	vrep_api/vrep.py	/^def simxAuxiliaryConsoleShow(clientID, consoleHandle, showState, operationMode):$/;"	f
simxBreakForceSensor	vrep_api/vrep.py	/^def simxBreakForceSensor(clientID, forceSensorHandle, operationMode):$/;"	f
simxCallScriptFunction	vrep_api/vrep.py	/^def simxCallScriptFunction(clientID, scriptDescription, options, functionName, inputInts, inputFloats, inputStrings, inputBuffer, operationMode):$/;"	f
simxClearFloatSignal	vrep_api/vrep.py	/^def simxClearFloatSignal(clientID, signalName, operationMode):$/;"	f
simxClearIntegerSignal	vrep_api/vrep.py	/^def simxClearIntegerSignal(clientID, signalName, operationMode):$/;"	f
simxClearStringSignal	vrep_api/vrep.py	/^def simxClearStringSignal(clientID, signalName, operationMode):$/;"	f
simxCloseScene	vrep_api/vrep.py	/^def simxCloseScene(clientID, operationMode):$/;"	f
simxCopyPasteObjects	vrep_api/vrep.py	/^def simxCopyPasteObjects(clientID, objectHandles, operationMode):$/;"	f
simxCreateBuffer	vrep_api/vrep.py	/^def simxCreateBuffer(bufferSize):$/;"	f
simxCreateDummy	vrep_api/vrep.py	/^def simxCreateDummy(clientID, size, color, operationMode):$/;"	f
simxDisplayDialog	vrep_api/vrep.py	/^def simxDisplayDialog(clientID, titleText, mainText, dialogType, initialText, titleColors, dialogColors, operationMode):$/;"	f
simxEndDialog	vrep_api/vrep.py	/^def simxEndDialog(clientID, dialogHandle, operationMode):$/;"	f
simxEraseFile	vrep_api/vrep.py	/^def simxEraseFile(clientID, fileName_serverSide, operationMode):$/;"	f
simxFinish	vrep_api/vrep.py	/^def simxFinish(clientID):$/;"	f
simxGetAndClearStringSignal	vrep_api/vrep.py	/^def simxGetAndClearStringSignal(clientID, signalName, operationMode):$/;"	f
simxGetArrayParameter	vrep_api/vrep.py	/^def simxGetArrayParameter(clientID, paramIdentifier, operationMode):$/;"	f
simxGetBooleanParameter	vrep_api/vrep.py	/^def simxGetBooleanParameter(clientID, paramIdentifier, operationMode):$/;"	f
simxGetCollectionHandle	vrep_api/vrep.py	/^def simxGetCollectionHandle(clientID, collectionName, operationMode):$/;"	f
simxGetCollisionHandle	vrep_api/vrep.py	/^def simxGetCollisionHandle(clientID, collisionObjectName, operationMode):$/;"	f
simxGetConnectionId	vrep_api/vrep.py	/^def simxGetConnectionId(clientID):$/;"	f
simxGetDialogInput	vrep_api/vrep.py	/^def simxGetDialogInput(clientID, dialogHandle, operationMode):$/;"	f
simxGetDialogResult	vrep_api/vrep.py	/^def simxGetDialogResult(clientID, dialogHandle, operationMode):$/;"	f
simxGetDistanceHandle	vrep_api/vrep.py	/^def simxGetDistanceHandle(clientID, distanceObjectName, operationMode):$/;"	f
simxGetFloatSignal	vrep_api/vrep.py	/^def simxGetFloatSignal(clientID, signalName, operationMode):$/;"	f
simxGetFloatingParameter	vrep_api/vrep.py	/^def simxGetFloatingParameter(clientID, paramIdentifier, operationMode):$/;"	f
simxGetInMessageInfo	vrep_api/vrep.py	/^def simxGetInMessageInfo(clientID, infoType):$/;"	f
simxGetIntegerParameter	vrep_api/vrep.py	/^def simxGetIntegerParameter(clientID, paramIdentifier, operationMode):$/;"	f
simxGetIntegerSignal	vrep_api/vrep.py	/^def simxGetIntegerSignal(clientID, signalName, operationMode):$/;"	f
simxGetJointForce	vrep_api/vrep.py	/^def simxGetJointForce(clientID, jointHandle, operationMode):$/;"	f
simxGetJointMatrix	vrep_api/vrep.py	/^def simxGetJointMatrix(clientID, jointHandle, operationMode):$/;"	f
simxGetJointPosition	vrep_api/vrep.py	/^def simxGetJointPosition(clientID, jointHandle, operationMode):$/;"	f
simxGetLastCmdTime	vrep_api/vrep.py	/^def simxGetLastCmdTime(clientID):$/;"	f
simxGetLastErrors	vrep_api/vrep.py	/^def simxGetLastErrors(clientID, operationMode):$/;"	f
simxGetModelProperty	vrep_api/vrep.py	/^def simxGetModelProperty(clientID, objectHandle, operationMode):$/;"	f
simxGetObjectChild	vrep_api/vrep.py	/^def simxGetObjectChild(clientID, parentObjectHandle, childIndex, operationMode):$/;"	f
simxGetObjectFloatParameter	vrep_api/vrep.py	/^def simxGetObjectFloatParameter(clientID, objectHandle, parameterID, operationMode):$/;"	f
simxGetObjectGroupData	vrep_api/vrep.py	/^def simxGetObjectGroupData(clientID, objectType, dataType, operationMode):$/;"	f
simxGetObjectHandle	vrep_api/vrep.py	/^def simxGetObjectHandle(clientID, objectName, operationMode):$/;"	f
simxGetObjectIntParameter	vrep_api/vrep.py	/^def simxGetObjectIntParameter(clientID, objectHandle, parameterID, operationMode):$/;"	f
simxGetObjectOrientation	vrep_api/vrep.py	/^def simxGetObjectOrientation(clientID, objectHandle, relativeToObjectHandle, operationMode):$/;"	f
simxGetObjectParent	vrep_api/vrep.py	/^def simxGetObjectParent(clientID, childObjectHandle, operationMode):$/;"	f
simxGetObjectPosition	vrep_api/vrep.py	/^def simxGetObjectPosition(clientID, objectHandle, relativeToObjectHandle, operationMode):$/;"	f
simxGetObjectSelection	vrep_api/vrep.py	/^def simxGetObjectSelection(clientID, operationMode):$/;"	f
simxGetObjectVelocity	vrep_api/vrep.py	/^def simxGetObjectVelocity(clientID, objectHandle, operationMode):$/;"	f
simxGetObjects	vrep_api/vrep.py	/^def simxGetObjects(clientID, objectType, operationMode):$/;"	f
simxGetOutMessageInfo	vrep_api/vrep.py	/^def simxGetOutMessageInfo(clientID, infoType):$/;"	f
simxGetPingTime	vrep_api/vrep.py	/^def simxGetPingTime(clientID):$/;"	f
simxGetStringParameter	vrep_api/vrep.py	/^def simxGetStringParameter(clientID, paramIdentifier, operationMode):$/;"	f
simxGetStringSignal	vrep_api/vrep.py	/^def simxGetStringSignal(clientID, signalName, operationMode):$/;"	f
simxGetUIButtonProperty	vrep_api/vrep.py	/^def simxGetUIButtonProperty(clientID, uiHandle, uiButtonID, operationMode):$/;"	f
simxGetUIEventButton	vrep_api/vrep.py	/^def simxGetUIEventButton(clientID, uiHandle, operationMode):$/;"	f
simxGetUIHandle	vrep_api/vrep.py	/^def simxGetUIHandle(clientID, uiName, operationMode):$/;"	f
simxGetUISlider	vrep_api/vrep.py	/^def simxGetUISlider(clientID, uiHandle, uiButtonID, operationMode):$/;"	f
simxGetVisionSensorDepthBuffer	vrep_api/vrep.py	/^def simxGetVisionSensorDepthBuffer(clientID, sensorHandle, operationMode):$/;"	f
simxGetVisionSensorImage	vrep_api/vrep.py	/^def simxGetVisionSensorImage(clientID, sensorHandle, options, operationMode):$/;"	f
simxJointGetForce	vrep_api/vrep.py	/^def simxJointGetForce(clientID, jointHandle, operationMode):$/;"	f
simxLoadModel	vrep_api/vrep.py	/^def simxLoadModel(clientID, modelPathAndName, options, operationMode):$/;"	f
simxLoadScene	vrep_api/vrep.py	/^def simxLoadScene(clientID, scenePathAndName, options, operationMode):$/;"	f
simxLoadUI	vrep_api/vrep.py	/^def simxLoadUI(clientID, uiPathAndName, options, operationMode):$/;"	f
simxPackFloats	vrep_api/vrep.py	/^def simxPackFloats(floatList):$/;"	f
simxPackInts	vrep_api/vrep.py	/^def simxPackInts(intList):$/;"	f
simxPauseCommunication	vrep_api/vrep.py	/^def simxPauseCommunication(clientID, enable):$/;"	f
simxPauseSimulation	vrep_api/vrep.py	/^def simxPauseSimulation(clientID, operationMode):$/;"	f
simxQuery	vrep_api/vrep.py	/^def simxQuery(clientID, signalName, signalValue, retSignalName, timeOutInMs):$/;"	f
simxReadCollision	vrep_api/vrep.py	/^def simxReadCollision(clientID, collisionObjectHandle, operationMode):$/;"	f
simxReadDistance	vrep_api/vrep.py	/^def simxReadDistance(clientID, distanceObjectHandle, operationMode):$/;"	f
simxReadForceSensor	vrep_api/vrep.py	/^def simxReadForceSensor(clientID, forceSensorHandle, operationMode):$/;"	f
simxReadProximitySensor	vrep_api/vrep.py	/^def simxReadProximitySensor(clientID, sensorHandle, operationMode):$/;"	f
simxReadStringStream	vrep_api/vrep.py	/^def simxReadStringStream(clientID, signalName, operationMode):$/;"	f
simxReadVisionSensor	vrep_api/vrep.py	/^def simxReadVisionSensor(clientID, sensorHandle, operationMode):$/;"	f
simxReleaseBuffer	vrep_api/vrep.py	/^def simxReleaseBuffer(buffer):$/;"	f
simxRemoveModel	vrep_api/vrep.py	/^def simxRemoveModel(clientID, objectHandle, operationMode):$/;"	f
simxRemoveObject	vrep_api/vrep.py	/^def simxRemoveObject(clientID, objectHandle, operationMode):$/;"	f
simxRemoveUI	vrep_api/vrep.py	/^def simxRemoveUI(clientID, uiHandle, operationMode):$/;"	f
simxSetArrayParameter	vrep_api/vrep.py	/^def simxSetArrayParameter(clientID, paramIdentifier, paramValues, operationMode):$/;"	f
simxSetBooleanParameter	vrep_api/vrep.py	/^def simxSetBooleanParameter(clientID, paramIdentifier, paramValue, operationMode):$/;"	f
simxSetFloatSignal	vrep_api/vrep.py	/^def simxSetFloatSignal(clientID, signalName, signalValue, operationMode):$/;"	f
simxSetFloatingParameter	vrep_api/vrep.py	/^def simxSetFloatingParameter(clientID, paramIdentifier, paramValue, operationMode):$/;"	f
simxSetIntegerParameter	vrep_api/vrep.py	/^def simxSetIntegerParameter(clientID, paramIdentifier, paramValue, operationMode):$/;"	f
simxSetIntegerSignal	vrep_api/vrep.py	/^def simxSetIntegerSignal(clientID, signalName, signalValue, operationMode):$/;"	f
simxSetJointForce	vrep_api/vrep.py	/^def simxSetJointForce(clientID, jointHandle, force, operationMode):$/;"	f
simxSetJointPosition	vrep_api/vrep.py	/^def simxSetJointPosition(clientID, jointHandle, position, operationMode):$/;"	f
simxSetJointTargetPosition	vrep_api/vrep.py	/^def simxSetJointTargetPosition(clientID, jointHandle, targetPosition, operationMode):$/;"	f
simxSetJointTargetVelocity	vrep_api/vrep.py	/^def simxSetJointTargetVelocity(clientID, jointHandle, targetVelocity, operationMode):$/;"	f
simxSetModelProperty	vrep_api/vrep.py	/^def simxSetModelProperty(clientID, objectHandle, prop, operationMode):$/;"	f
simxSetObjectFloatParameter	vrep_api/vrep.py	/^def simxSetObjectFloatParameter(clientID, objectHandle, parameterID, parameterValue, operationMode):$/;"	f
simxSetObjectIntParameter	vrep_api/vrep.py	/^def simxSetObjectIntParameter(clientID, objectHandle, parameterID, parameterValue, operationMode):$/;"	f
simxSetObjectOrientation	vrep_api/vrep.py	/^def simxSetObjectOrientation(clientID, objectHandle, relativeToObjectHandle, eulerAngles, operationMode):$/;"	f
simxSetObjectParent	vrep_api/vrep.py	/^def simxSetObjectParent(clientID, objectHandle, parentObject, keepInPlace, operationMode):$/;"	f
simxSetObjectPosition	vrep_api/vrep.py	/^def simxSetObjectPosition(clientID, objectHandle, relativeToObjectHandle, position, operationMode):$/;"	f
simxSetObjectSelection	vrep_api/vrep.py	/^def simxSetObjectSelection(clientID, objectHandles, operationMode):$/;"	f
simxSetSphericalJointMatrix	vrep_api/vrep.py	/^def simxSetSphericalJointMatrix(clientID, jointHandle, matrix, operationMode):$/;"	f
simxSetStringSignal	vrep_api/vrep.py	/^def simxSetStringSignal(clientID, signalName, signalValue, operationMode):$/;"	f
simxSetUIButtonLabel	vrep_api/vrep.py	/^def simxSetUIButtonLabel(clientID, uiHandle, uiButtonID, upStateLabel, downStateLabel, operationMode):$/;"	f
simxSetUIButtonProperty	vrep_api/vrep.py	/^def simxSetUIButtonProperty(clientID, uiHandle, uiButtonID, prop, operationMode):$/;"	f
simxSetUISlider	vrep_api/vrep.py	/^def simxSetUISlider(clientID, uiHandle, uiButtonID, position, operationMode):$/;"	f
simxSetVisionSensorImage	vrep_api/vrep.py	/^def simxSetVisionSensorImage(clientID, sensorHandle, image, options, operationMode):$/;"	f
simxStart	vrep_api/vrep.py	/^def simxStart(connectionAddress, connectionPort, waitUntilConnected, doNotReconnectOnceDisconnected, timeOutInMs, commThreadCycleInMs):$/;"	f
simxStartSimulation	vrep_api/vrep.py	/^def simxStartSimulation(clientID, operationMode):$/;"	f
simxStopSimulation	vrep_api/vrep.py	/^def simxStopSimulation(clientID, operationMode):$/;"	f
simxSynchronous	vrep_api/vrep.py	/^def simxSynchronous(clientID, enable):$/;"	f
simxSynchronousTrigger	vrep_api/vrep.py	/^def simxSynchronousTrigger(clientID):$/;"	f
simxTransferFile	vrep_api/vrep.py	/^def simxTransferFile(clientID, filePathAndName, fileName_serverSide, timeOut, operationMode):$/;"	f
simxUnpackFloats	vrep_api/vrep.py	/^def simxUnpackFloats(floatsPackedInString):$/;"	f
simxUnpackInts	vrep_api/vrep.py	/^def simxUnpackInts(intsPackedInString):$/;"	f
simxWriteStringStream	vrep_api/vrep.py	/^def simxWriteStringStream(clientID, signalName, signalValue, operationMode):$/;"	f
simx_cmdheaderoffset_cmd	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_cmd=14    # 1 simxInt. Generated by the client (and used in a reply by the server). The command combined with the operation mode of the command. $/;"	v
simx_cmdheaderoffset_delay_or_split	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_delay_or_split =18    # 1 simxUShort. Generated by the client or server. The amount of delay in ms of a continuous command or the max. pure data size to send at once (applies to split commands). $/;"	v
simx_cmdheaderoffset_full_mem_size	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_full_mem_size  =4    # 1 simxInt. Generated by the client or server. The full buffer size of the command (applies to split chunks). $/;"	v
simx_cmdheaderoffset_mem_size	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_mem_size       =0    # 1 simxInt. Generated by the client or server. The buffer size of the command. $/;"	v
simx_cmdheaderoffset_pdata_offset0	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_pdata_offset0  =8    # 1 simxUShort. Generated by the client or server. The amount of data that is part of the command identification. $/;"	v
simx_cmdheaderoffset_pdata_offset1	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_pdata_offset1  =10    # 1 simxInt. Generated by the client or server. The amount of shift of the pure data buffer (applies to split chunks). $/;"	v
simx_cmdheaderoffset_reserved	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_reserved       =25    # 1 byte. Not yet used $/;"	v
simx_cmdheaderoffset_sim_time	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_sim_time       =20    # 1 simxInt. Generated by the server. The simulation time (in ms) when the command was executed (or 0 if simulation is not running) $/;"	v
simx_cmdheaderoffset_status	vrep_api/vrepConst.py	/^simx_cmdheaderoffset_status         =24    # 1 byte. Generated by the server. (1 bit 0 is set --> error in function execution on server side). The client writes bit 1 if command cannot be overwritten$/;"	v
simx_error_illegal_opmode_flag	vrep_api/vrepConst.py	/^simx_error_illegal_opmode_flag    =0x000004        # command doesn't support the specified operation mode $/;"	v
simx_error_initialize_error_flag	vrep_api/vrepConst.py	/^simx_error_initialize_error_flag        =0x000040        # simxStart was not yet called $/;"	v
simx_error_local_error_flag	vrep_api/vrepConst.py	/^simx_error_local_error_flag        =0x000020        # command caused an error on the client side $/;"	v
simx_error_noerror	vrep_api/vrepConst.py	/^simx_error_noerror                =0x000000$/;"	v
simx_error_novalue_flag	vrep_api/vrepConst.py	/^simx_error_novalue_flag            =0x000001        # input buffer doesn't contain the specified command $/;"	v
simx_error_remote_error_flag	vrep_api/vrepConst.py	/^simx_error_remote_error_flag    =0x000008        # command caused an error on the server side $/;"	v
simx_error_split_progress_flag	vrep_api/vrepConst.py	/^simx_error_split_progress_flag    =0x000010        # previous similar command not yet fully processed (applies to opmode_oneshot_split operation modes) $/;"	v
simx_error_timeout_flag	vrep_api/vrepConst.py	/^simx_error_timeout_flag            =0x000002        # command reply not received in time for opmode_oneshot_wait operation mode $/;"	v
simx_headeroffset_client_time	vrep_api/vrepConst.py	/^simx_headeroffset_client_time   =7    # 1 simxInt. Client time stamp generated by the client (and sent back by the server) $/;"	v
simx_headeroffset_crc	vrep_api/vrepConst.py	/^simx_headeroffset_crc           =0    # 1 simxUShort. Generated by the client or server. The CRC for the message $/;"	v
simx_headeroffset_message_id	vrep_api/vrepConst.py	/^simx_headeroffset_message_id    =3    # 1 simxInt. Generated by the client (and used in a reply by the server) $/;"	v
simx_headeroffset_scene_id	vrep_api/vrepConst.py	/^simx_headeroffset_scene_id      =15    # 1 simxUShort. Generated by the server. A unique ID identifying the scene currently displayed $/;"	v
simx_headeroffset_server_state	vrep_api/vrepConst.py	/^simx_headeroffset_server_state  =17    # 1 byte. Generated by the server. Bit coded 0 set --> simulation not stopped 1 set --> simulation paused 2 set --> real-time switch on 3-5 edit mode type (0=no edit mode 1=triangle 2=vertex 3=edge 4=path 5=UI)  $/;"	v
simx_headeroffset_server_time	vrep_api/vrepConst.py	/^simx_headeroffset_server_time   =11    # 1 simxInt. Generated by the server when a reply is generated. The server timestamp $/;"	v
simx_headeroffset_version	vrep_api/vrepConst.py	/^simx_headeroffset_version       =2    # 1 byte. Generated by the client or server. The version of the remote API software $/;"	v
simx_opmode_blocking	vrep_api/vrepConst.py	/^simx_opmode_blocking            =0x010000 # sends command as one chunk. Reply will also come as one chunk. Waits for the reply (_REPLY_WAIT_TIMEOUT_IN_MS is the timeout). $/;"	v
simx_opmode_buffer	vrep_api/vrepConst.py	/^simx_opmode_buffer                =0x060000    # doesn't send anything but checks if a reply for the given command is available in the input buffer (i.e. previously received from the server) $/;"	v
simx_opmode_continuous	vrep_api/vrepConst.py	/^simx_opmode_continuous            =0x020000  $/;"	v
simx_opmode_continuous_split	vrep_api/vrepConst.py	/^simx_opmode_continuous_split    =0x040000$/;"	v
simx_opmode_discontinue	vrep_api/vrepConst.py	/^simx_opmode_discontinue            =0x050000    # removes and cancels all commands stored on the client or server side (also continuous commands) $/;"	v
simx_opmode_oneshot	vrep_api/vrepConst.py	/^simx_opmode_oneshot                =0x000000 # sends command as one chunk. Reply will also come as one chunk. Doesn't wait for the reply. $/;"	v
simx_opmode_oneshot_split	vrep_api/vrepConst.py	/^simx_opmode_oneshot_split        =0x030000   # sends command as several chunks (max chunk size is x bytes where x can be _MIN_SPLIT_AMOUNT_IN_BYTES-65535. Just add x to opmode_oneshot_split). Reply will also come as several chunks. Doesn't wait for the reply.      $/;"	v
simx_opmode_oneshot_wait	vrep_api/vrepConst.py	/^simx_opmode_oneshot_wait        =0x010000 # sends command as one chunk. Reply will also come as one chunk. Waits for the reply (_REPLY_WAIT_TIMEOUT_IN_MS is the timeout). $/;"	v
simx_opmode_remove	vrep_api/vrepConst.py	/^simx_opmode_remove                =0x070000    # doesn't send anything and doesn't return any specific value. It just erases a similar command reply in the inbox (to free some memory) $/;"	v
simx_opmode_streaming	vrep_api/vrepConst.py	/^simx_opmode_streaming            =0x020000 # sends command as one chunk. Command will be stored on the server and always executed $/;"	v
simx_opmode_streaming_split	vrep_api/vrepConst.py	/^simx_opmode_streaming_split    =0x040000    # sends command as several chunks (max chunk size is x bytes where x can be _MIN_SPLIT_AMOUNT_IN_BYTES-65535. Just add x to opmode_continuous_split). Command will be stored on the server and always executed. A reply will be sent continuously each time as several chunks. Doesn't wait for the reply. $/;"	v
simx_return_illegal_opmode_flag	vrep_api/vrepConst.py	/^simx_return_illegal_opmode_flag    =0x000004        # command doesn't support the specified operation mode $/;"	v
simx_return_initialize_error_flag	vrep_api/vrepConst.py	/^simx_return_initialize_error_flag    =0x000040        # simxStart was not yet called $/;"	v
simx_return_local_error_flag	vrep_api/vrepConst.py	/^simx_return_local_error_flag    =0x000020        # command caused an error on the client side $/;"	v
simx_return_novalue_flag	vrep_api/vrepConst.py	/^simx_return_novalue_flag        =0x000001        # input buffer doesn't contain the specified command $/;"	v
simx_return_ok	vrep_api/vrepConst.py	/^simx_return_ok                    =0x000000$/;"	v
simx_return_remote_error_flag	vrep_api/vrepConst.py	/^simx_return_remote_error_flag    =0x000008        # command caused an error on the server side $/;"	v
simx_return_split_progress_flag	vrep_api/vrepConst.py	/^simx_return_split_progress_flag    =0x000010        # previous similar command not yet fully processed (applies to opmode_oneshot_split operation modes) $/;"	v
simx_return_timeout_flag	vrep_api/vrepConst.py	/^simx_return_timeout_flag        =0x000002        # command reply not received in time for opmode_oneshot_wait operation mode $/;"	v
solve	incline.py	/^from DIRECT import solve$/;"	i
solve	terrains.py	/^from DIRECT import solve$/;"	i
solve	turning.py	/^from DIRECT import solve$/;"	i
steps	normal.py	/^        steps=400,$/;"	v
stopCriteria	discovery.py	/^stopCriteria = StopCriteria(maxEvals=1250)$/;"	v
stopCriteria	moo.py	/^stopCriteria = StopCriteria(maxEvals=50)$/;"	v
stopCriteria	normal.py	/^stopCriteria = StopCriteria(maxEvals=50)$/;"	v
struct	vrep_api/vrep.py	/^import struct$/;"	i
sys	vrep_api/vrep.py	/^import sys$/;"	i
task	discovery.py	/^    vectorized=False)$/;"	v
task	moo.py	/^    vectorized=False)$/;"	v
task	normal.py	/^    vectorized=False)$/;"	v
terrain_obj_f	objective_functions.py	/^def terrain_obj_f(x):$/;"	f
to	turning.py	/^    (4 * np.cos(-np.pi \/ 4), 4 * np.sin(-np.pi \/ 4))])$/;"	v
traceback	objective_functions.py	/^import traceback$/;"	i
train_GP	incline.py	/^    def train_GP(self, X, Y, kernel=None):$/;"	m	class:InclineOptimizer
train_GP	terrains.py	/^    def train_GP(self, X, Y, kernel=None):$/;"	m	class:TerrainOptimizer
train_GP	turning.py	/^    def train_GP(self, X, Y, kernel=None):$/;"	m	class:TurningOptimizer
turning_obj_f	objective_functions.py	/^def turning_obj_f(x):$/;"	f
update	cpg.py	/^    def update(self, plot=True):$/;"	m	class:CpgController
updateAll	cpg.py	/^    def updateAll(self):$/;"	m	class:OscillatorNetwork
update_energy	walker.py	/^    def update_energy(self):$/;"	m	class:Walker
update_force	walker.py	/^    def update_force(self, force):$/;"	m	class:Motor
vrep	objective_functions.py	/^import vrep_api.vrep as vrep$/;"	i
vrep	walker.py	/^import vrep_api.vrep as vrep$/;"	i
vrep_api	objective_functions.py	/^import vrep_api.vrep as vrep$/;"	i
vrep_api	walker.py	/^import vrep_api.vrep as vrep$/;"	i
wait	objective_functions.py	/^def wait(steps):$/;"	f
